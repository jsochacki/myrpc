// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sp_ste.proto

#include "sp_ste.pb.h"
#include "sp_ste.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sp {
namespace ste {

static const char* sp_ste_control_method_names[] = {
  "/sp.ste.sp_ste_control/setup",
};

std::unique_ptr< sp_ste_control::Stub> sp_ste_control::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< sp_ste_control::Stub> stub(new sp_ste_control::Stub(channel));
  return stub;
}

sp_ste_control::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_setup_(sp_ste_control_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status sp_ste_control::Stub::setup(::grpc::ClientContext* context, const ::sp::ste::set_parameters& request, ::sp::ste::parameter_values* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_setup_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::sp::ste::parameter_values>* sp_ste_control::Stub::AsyncsetupRaw(::grpc::ClientContext* context, const ::sp::ste::set_parameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sp::ste::parameter_values>::Create(channel_.get(), cq, rpcmethod_setup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sp::ste::parameter_values>* sp_ste_control::Stub::PrepareAsyncsetupRaw(::grpc::ClientContext* context, const ::sp::ste::set_parameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sp::ste::parameter_values>::Create(channel_.get(), cq, rpcmethod_setup_, context, request, false);
}

sp_ste_control::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      sp_ste_control_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< sp_ste_control::Service, ::sp::ste::set_parameters, ::sp::ste::parameter_values>(
          std::mem_fn(&sp_ste_control::Service::setup), this)));
}

sp_ste_control::Service::~Service() {
}

::grpc::Status sp_ste_control::Service::setup(::grpc::ServerContext* context, const ::sp::ste::set_parameters* request, ::sp::ste::parameter_values* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sp
}  // namespace ste


syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.sp_ste";
option java_outer_classname = "sp_ste_proto";

option optimize_for = SPEED;

//import "../Reference/CommonTypes.proto";

//This imports definitions from the commontypes.proto file, i don't need this
//right now so it is commented out
//import "CommonTypes.proto";

//The name of the package below is the name of the namespace for your functions
//except . is replaced with :: obviously
package sp.ste;

service sp_ste_control
{
   //This just checks that the connection is working and reads the sent values back
   rpc loopback(set_parameters) returns (parameter_values) {}
   //This just checks the current values of the parameter set
   rpc check_current_values(null_message) returns (parameter_values) {}
   //This does the setup for a single measurement and reads old values
   rpc issue_new_values_and_read_old(set_parameters) returns (parameter_values) {}
   //This does the setup for a single measurement and reads new values
   rpc issue_new_values_and_read_new(set_parameters) returns (parameter_values) {}
   //This launches a single measurement
   //rpc single_measurement (start_single) returns (single_ack) {}
   //This launches multiple measurements
   //rpc multiple_measurements (start_multiple) returns (multiple_ack) {}
}

/*
For strings, the default value is the empty string.
For bytes, the default value is empty bytes.
For bools, the default value is false.
For numeric types, the default value is zero.
For enums, the default value is the first defined enum value, which must be 0.
For message fields, the field is not set. Its exact value is language-dependent. See the generated code guide for details.
*/

enum TxIdlePattern
{
   TX_IDLE_PATTERN_ZERO = 0;
   TX_IDLE_PATTERN_RAMP = 1;
   TX_IDLE_PATTERN_CW = 2; // Uses normal tone1 and tone2 parameters
}

//COMPOSITE TOP LEVEL MESSAGES
message set_parameters
{
   sp.ste.TestBedRpcHeader hdr = 1;
   sp.ste.PayloadSteSingleMeasurementRxParams rx = 2;
   sp.ste.PayloadSteSingleMeasurementTxParams tx = 3;
}

message parameter_values
{
   sp.ste.TestBedRpcHeader hdr = 1;
   sp.ste.PayloadSteSingleMeasurementRxParams rx = 2;
   sp.ste.PayloadSteSingleMeasurementTxParams tx = 3;
}

message TestBedRpcHeader
{
   string module = 1;
   int32  core = 2;
}

//LOWER LEVEL MESSAGES
message PayloadSteSingleMeasurementTxParams
{
   float tx_freq1_Hz = 1;
   float tx_phase1_rot = 2;
   float tx_freq2_Hz = 3;
   float tx_phase2_rot = 4;
   float gain1 = 5;
   float gain2 = 6;
   float gain3 = 7; // For setting AWGN standard deviation
   bool awgn_enable = 8;
   bool notch_enable = 9; // AWGN has 50 MHz notch in center, for NPR testing
   uint32 num_tx_samples_total = 10;
   uint32 num_tx_samples_per_batch = 11;
   string filebasename = 12;
   string filename_tx_samples = 13;
   uint64 nextTxStartTime = 14;
   TxIdlePattern tx_idle_pattern = 15;
   //bool save_tx_iq = 11; //not yet implemented
}

//SUB MESSAGE DEFINITIONS
message PayloadSteSingleMeasurementRxParams
{
   uint32 fft_length_a = 1;
   uint32 fft_length_b = 2;
   uint32 fft_batches_a = 3;
   uint32 fft_batches_b = 4;
   float rx_rot_freq_Hz = 5;
   uint32 decimation = 6;
   uint32 num_rx_samples = 7;
   bool save_iq = 8;
   bool fft_a_enable = 9;
   bool fft_b_enable = 10;
   bool parameter_estimate_enable = 11;
   string filebasename = 12;
   string filename_fft_a = 13;
   string filename_fft_b = 14;
   string filename_rx_samples = 15;
   uint64 nextRxStartTime = 16;
}


message null_message
{

}

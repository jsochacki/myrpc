// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sp_ste.proto

#ifndef PROTOBUF_sp_5fste_2eproto__INCLUDED
#define PROTOBUF_sp_5fste_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_sp_5fste_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsset_parametersImpl();
void InitDefaultsset_parameters();
void InitDefaultsparameter_valuesImpl();
void InitDefaultsparameter_values();
void InitDefaultsTestBedRpcHeaderImpl();
void InitDefaultsTestBedRpcHeader();
void InitDefaultsPayloadSteSingleMeasurementTxParamsImpl();
void InitDefaultsPayloadSteSingleMeasurementTxParams();
void InitDefaultsPayloadSteSingleMeasurementRxParamsImpl();
void InitDefaultsPayloadSteSingleMeasurementRxParams();
void InitDefaultsnull_messageImpl();
void InitDefaultsnull_message();
inline void InitDefaults() {
  InitDefaultsset_parameters();
  InitDefaultsparameter_values();
  InitDefaultsTestBedRpcHeader();
  InitDefaultsPayloadSteSingleMeasurementTxParams();
  InitDefaultsPayloadSteSingleMeasurementRxParams();
  InitDefaultsnull_message();
}
}  // namespace protobuf_sp_5fste_2eproto
namespace sp {
namespace ste {
class PayloadSteSingleMeasurementRxParams;
class PayloadSteSingleMeasurementRxParamsDefaultTypeInternal;
extern PayloadSteSingleMeasurementRxParamsDefaultTypeInternal _PayloadSteSingleMeasurementRxParams_default_instance_;
class PayloadSteSingleMeasurementTxParams;
class PayloadSteSingleMeasurementTxParamsDefaultTypeInternal;
extern PayloadSteSingleMeasurementTxParamsDefaultTypeInternal _PayloadSteSingleMeasurementTxParams_default_instance_;
class TestBedRpcHeader;
class TestBedRpcHeaderDefaultTypeInternal;
extern TestBedRpcHeaderDefaultTypeInternal _TestBedRpcHeader_default_instance_;
class null_message;
class null_messageDefaultTypeInternal;
extern null_messageDefaultTypeInternal _null_message_default_instance_;
class parameter_values;
class parameter_valuesDefaultTypeInternal;
extern parameter_valuesDefaultTypeInternal _parameter_values_default_instance_;
class set_parameters;
class set_parametersDefaultTypeInternal;
extern set_parametersDefaultTypeInternal _set_parameters_default_instance_;
}  // namespace ste
}  // namespace sp
namespace sp {
namespace ste {

enum TxIdlePattern {
  TX_IDLE_PATTERN_ZERO = 0,
  TX_IDLE_PATTERN_RAMP = 1,
  TX_IDLE_PATTERN_CW = 2,
  TxIdlePattern_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TxIdlePattern_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TxIdlePattern_IsValid(int value);
const TxIdlePattern TxIdlePattern_MIN = TX_IDLE_PATTERN_ZERO;
const TxIdlePattern TxIdlePattern_MAX = TX_IDLE_PATTERN_CW;
const int TxIdlePattern_ARRAYSIZE = TxIdlePattern_MAX + 1;

const ::google::protobuf::EnumDescriptor* TxIdlePattern_descriptor();
inline const ::std::string& TxIdlePattern_Name(TxIdlePattern value) {
  return ::google::protobuf::internal::NameOfEnum(
    TxIdlePattern_descriptor(), value);
}
inline bool TxIdlePattern_Parse(
    const ::std::string& name, TxIdlePattern* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TxIdlePattern>(
    TxIdlePattern_descriptor(), name, value);
}
// ===================================================================

class set_parameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sp.ste.set_parameters) */ {
 public:
  set_parameters();
  virtual ~set_parameters();

  set_parameters(const set_parameters& from);

  inline set_parameters& operator=(const set_parameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  set_parameters(set_parameters&& from) noexcept
    : set_parameters() {
    *this = ::std::move(from);
  }

  inline set_parameters& operator=(set_parameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const set_parameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const set_parameters* internal_default_instance() {
    return reinterpret_cast<const set_parameters*>(
               &_set_parameters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(set_parameters* other);
  friend void swap(set_parameters& a, set_parameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline set_parameters* New() const PROTOBUF_FINAL { return New(NULL); }

  set_parameters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const set_parameters& from);
  void MergeFrom(const set_parameters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(set_parameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .sp.ste.TestBedRpcHeader hdr = 1;
  bool has_hdr() const;
  void clear_hdr();
  static const int kHdrFieldNumber = 1;
  const ::sp::ste::TestBedRpcHeader& hdr() const;
  ::sp::ste::TestBedRpcHeader* release_hdr();
  ::sp::ste::TestBedRpcHeader* mutable_hdr();
  void set_allocated_hdr(::sp::ste::TestBedRpcHeader* hdr);

  // .sp.ste.PayloadSteSingleMeasurementRxParams rx = 2;
  bool has_rx() const;
  void clear_rx();
  static const int kRxFieldNumber = 2;
  const ::sp::ste::PayloadSteSingleMeasurementRxParams& rx() const;
  ::sp::ste::PayloadSteSingleMeasurementRxParams* release_rx();
  ::sp::ste::PayloadSteSingleMeasurementRxParams* mutable_rx();
  void set_allocated_rx(::sp::ste::PayloadSteSingleMeasurementRxParams* rx);

  // .sp.ste.PayloadSteSingleMeasurementTxParams tx = 3;
  bool has_tx() const;
  void clear_tx();
  static const int kTxFieldNumber = 3;
  const ::sp::ste::PayloadSteSingleMeasurementTxParams& tx() const;
  ::sp::ste::PayloadSteSingleMeasurementTxParams* release_tx();
  ::sp::ste::PayloadSteSingleMeasurementTxParams* mutable_tx();
  void set_allocated_tx(::sp::ste::PayloadSteSingleMeasurementTxParams* tx);

  // @@protoc_insertion_point(class_scope:sp.ste.set_parameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::sp::ste::TestBedRpcHeader* hdr_;
  ::sp::ste::PayloadSteSingleMeasurementRxParams* rx_;
  ::sp::ste::PayloadSteSingleMeasurementTxParams* tx_;
  mutable int _cached_size_;
  friend struct ::protobuf_sp_5fste_2eproto::TableStruct;
  friend void ::protobuf_sp_5fste_2eproto::InitDefaultsset_parametersImpl();
};
// -------------------------------------------------------------------

class parameter_values : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sp.ste.parameter_values) */ {
 public:
  parameter_values();
  virtual ~parameter_values();

  parameter_values(const parameter_values& from);

  inline parameter_values& operator=(const parameter_values& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  parameter_values(parameter_values&& from) noexcept
    : parameter_values() {
    *this = ::std::move(from);
  }

  inline parameter_values& operator=(parameter_values&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const parameter_values& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const parameter_values* internal_default_instance() {
    return reinterpret_cast<const parameter_values*>(
               &_parameter_values_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(parameter_values* other);
  friend void swap(parameter_values& a, parameter_values& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline parameter_values* New() const PROTOBUF_FINAL { return New(NULL); }

  parameter_values* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const parameter_values& from);
  void MergeFrom(const parameter_values& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(parameter_values* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .sp.ste.TestBedRpcHeader hdr = 1;
  bool has_hdr() const;
  void clear_hdr();
  static const int kHdrFieldNumber = 1;
  const ::sp::ste::TestBedRpcHeader& hdr() const;
  ::sp::ste::TestBedRpcHeader* release_hdr();
  ::sp::ste::TestBedRpcHeader* mutable_hdr();
  void set_allocated_hdr(::sp::ste::TestBedRpcHeader* hdr);

  // .sp.ste.PayloadSteSingleMeasurementRxParams rx = 2;
  bool has_rx() const;
  void clear_rx();
  static const int kRxFieldNumber = 2;
  const ::sp::ste::PayloadSteSingleMeasurementRxParams& rx() const;
  ::sp::ste::PayloadSteSingleMeasurementRxParams* release_rx();
  ::sp::ste::PayloadSteSingleMeasurementRxParams* mutable_rx();
  void set_allocated_rx(::sp::ste::PayloadSteSingleMeasurementRxParams* rx);

  // .sp.ste.PayloadSteSingleMeasurementTxParams tx = 3;
  bool has_tx() const;
  void clear_tx();
  static const int kTxFieldNumber = 3;
  const ::sp::ste::PayloadSteSingleMeasurementTxParams& tx() const;
  ::sp::ste::PayloadSteSingleMeasurementTxParams* release_tx();
  ::sp::ste::PayloadSteSingleMeasurementTxParams* mutable_tx();
  void set_allocated_tx(::sp::ste::PayloadSteSingleMeasurementTxParams* tx);

  // @@protoc_insertion_point(class_scope:sp.ste.parameter_values)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::sp::ste::TestBedRpcHeader* hdr_;
  ::sp::ste::PayloadSteSingleMeasurementRxParams* rx_;
  ::sp::ste::PayloadSteSingleMeasurementTxParams* tx_;
  mutable int _cached_size_;
  friend struct ::protobuf_sp_5fste_2eproto::TableStruct;
  friend void ::protobuf_sp_5fste_2eproto::InitDefaultsparameter_valuesImpl();
};
// -------------------------------------------------------------------

class TestBedRpcHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sp.ste.TestBedRpcHeader) */ {
 public:
  TestBedRpcHeader();
  virtual ~TestBedRpcHeader();

  TestBedRpcHeader(const TestBedRpcHeader& from);

  inline TestBedRpcHeader& operator=(const TestBedRpcHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestBedRpcHeader(TestBedRpcHeader&& from) noexcept
    : TestBedRpcHeader() {
    *this = ::std::move(from);
  }

  inline TestBedRpcHeader& operator=(TestBedRpcHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestBedRpcHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestBedRpcHeader* internal_default_instance() {
    return reinterpret_cast<const TestBedRpcHeader*>(
               &_TestBedRpcHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TestBedRpcHeader* other);
  friend void swap(TestBedRpcHeader& a, TestBedRpcHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestBedRpcHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  TestBedRpcHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TestBedRpcHeader& from);
  void MergeFrom(const TestBedRpcHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TestBedRpcHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string module = 1;
  void clear_module();
  static const int kModuleFieldNumber = 1;
  const ::std::string& module() const;
  void set_module(const ::std::string& value);
  #if LANG_CXX11
  void set_module(::std::string&& value);
  #endif
  void set_module(const char* value);
  void set_module(const char* value, size_t size);
  ::std::string* mutable_module();
  ::std::string* release_module();
  void set_allocated_module(::std::string* module);

  // int32 core = 2;
  void clear_core();
  static const int kCoreFieldNumber = 2;
  ::google::protobuf::int32 core() const;
  void set_core(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sp.ste.TestBedRpcHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr module_;
  ::google::protobuf::int32 core_;
  mutable int _cached_size_;
  friend struct ::protobuf_sp_5fste_2eproto::TableStruct;
  friend void ::protobuf_sp_5fste_2eproto::InitDefaultsTestBedRpcHeaderImpl();
};
// -------------------------------------------------------------------

class PayloadSteSingleMeasurementTxParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sp.ste.PayloadSteSingleMeasurementTxParams) */ {
 public:
  PayloadSteSingleMeasurementTxParams();
  virtual ~PayloadSteSingleMeasurementTxParams();

  PayloadSteSingleMeasurementTxParams(const PayloadSteSingleMeasurementTxParams& from);

  inline PayloadSteSingleMeasurementTxParams& operator=(const PayloadSteSingleMeasurementTxParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PayloadSteSingleMeasurementTxParams(PayloadSteSingleMeasurementTxParams&& from) noexcept
    : PayloadSteSingleMeasurementTxParams() {
    *this = ::std::move(from);
  }

  inline PayloadSteSingleMeasurementTxParams& operator=(PayloadSteSingleMeasurementTxParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PayloadSteSingleMeasurementTxParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PayloadSteSingleMeasurementTxParams* internal_default_instance() {
    return reinterpret_cast<const PayloadSteSingleMeasurementTxParams*>(
               &_PayloadSteSingleMeasurementTxParams_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PayloadSteSingleMeasurementTxParams* other);
  friend void swap(PayloadSteSingleMeasurementTxParams& a, PayloadSteSingleMeasurementTxParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PayloadSteSingleMeasurementTxParams* New() const PROTOBUF_FINAL { return New(NULL); }

  PayloadSteSingleMeasurementTxParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PayloadSteSingleMeasurementTxParams& from);
  void MergeFrom(const PayloadSteSingleMeasurementTxParams& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PayloadSteSingleMeasurementTxParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filebasename = 12;
  void clear_filebasename();
  static const int kFilebasenameFieldNumber = 12;
  const ::std::string& filebasename() const;
  void set_filebasename(const ::std::string& value);
  #if LANG_CXX11
  void set_filebasename(::std::string&& value);
  #endif
  void set_filebasename(const char* value);
  void set_filebasename(const char* value, size_t size);
  ::std::string* mutable_filebasename();
  ::std::string* release_filebasename();
  void set_allocated_filebasename(::std::string* filebasename);

  // string filename_tx_samples = 13;
  void clear_filename_tx_samples();
  static const int kFilenameTxSamplesFieldNumber = 13;
  const ::std::string& filename_tx_samples() const;
  void set_filename_tx_samples(const ::std::string& value);
  #if LANG_CXX11
  void set_filename_tx_samples(::std::string&& value);
  #endif
  void set_filename_tx_samples(const char* value);
  void set_filename_tx_samples(const char* value, size_t size);
  ::std::string* mutable_filename_tx_samples();
  ::std::string* release_filename_tx_samples();
  void set_allocated_filename_tx_samples(::std::string* filename_tx_samples);

  // float tx_freq1_Hz = 1;
  void clear_tx_freq1_hz();
  static const int kTxFreq1HzFieldNumber = 1;
  float tx_freq1_hz() const;
  void set_tx_freq1_hz(float value);

  // float tx_phase1_rot = 2;
  void clear_tx_phase1_rot();
  static const int kTxPhase1RotFieldNumber = 2;
  float tx_phase1_rot() const;
  void set_tx_phase1_rot(float value);

  // float tx_freq2_Hz = 3;
  void clear_tx_freq2_hz();
  static const int kTxFreq2HzFieldNumber = 3;
  float tx_freq2_hz() const;
  void set_tx_freq2_hz(float value);

  // float tx_phase2_rot = 4;
  void clear_tx_phase2_rot();
  static const int kTxPhase2RotFieldNumber = 4;
  float tx_phase2_rot() const;
  void set_tx_phase2_rot(float value);

  // float gain1 = 5;
  void clear_gain1();
  static const int kGain1FieldNumber = 5;
  float gain1() const;
  void set_gain1(float value);

  // float gain2 = 6;
  void clear_gain2();
  static const int kGain2FieldNumber = 6;
  float gain2() const;
  void set_gain2(float value);

  // float gain3 = 7;
  void clear_gain3();
  static const int kGain3FieldNumber = 7;
  float gain3() const;
  void set_gain3(float value);

  // bool awgn_enable = 8;
  void clear_awgn_enable();
  static const int kAwgnEnableFieldNumber = 8;
  bool awgn_enable() const;
  void set_awgn_enable(bool value);

  // bool notch_enable = 9;
  void clear_notch_enable();
  static const int kNotchEnableFieldNumber = 9;
  bool notch_enable() const;
  void set_notch_enable(bool value);

  // uint32 num_tx_samples_total = 10;
  void clear_num_tx_samples_total();
  static const int kNumTxSamplesTotalFieldNumber = 10;
  ::google::protobuf::uint32 num_tx_samples_total() const;
  void set_num_tx_samples_total(::google::protobuf::uint32 value);

  // uint32 num_tx_samples_per_batch = 11;
  void clear_num_tx_samples_per_batch();
  static const int kNumTxSamplesPerBatchFieldNumber = 11;
  ::google::protobuf::uint32 num_tx_samples_per_batch() const;
  void set_num_tx_samples_per_batch(::google::protobuf::uint32 value);

  // uint64 nextTxStartTime = 14;
  void clear_nexttxstarttime();
  static const int kNextTxStartTimeFieldNumber = 14;
  ::google::protobuf::uint64 nexttxstarttime() const;
  void set_nexttxstarttime(::google::protobuf::uint64 value);

  // .sp.ste.TxIdlePattern tx_idle_pattern = 15;
  void clear_tx_idle_pattern();
  static const int kTxIdlePatternFieldNumber = 15;
  ::sp::ste::TxIdlePattern tx_idle_pattern() const;
  void set_tx_idle_pattern(::sp::ste::TxIdlePattern value);

  // @@protoc_insertion_point(class_scope:sp.ste.PayloadSteSingleMeasurementTxParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filebasename_;
  ::google::protobuf::internal::ArenaStringPtr filename_tx_samples_;
  float tx_freq1_hz_;
  float tx_phase1_rot_;
  float tx_freq2_hz_;
  float tx_phase2_rot_;
  float gain1_;
  float gain2_;
  float gain3_;
  bool awgn_enable_;
  bool notch_enable_;
  ::google::protobuf::uint32 num_tx_samples_total_;
  ::google::protobuf::uint32 num_tx_samples_per_batch_;
  ::google::protobuf::uint64 nexttxstarttime_;
  int tx_idle_pattern_;
  mutable int _cached_size_;
  friend struct ::protobuf_sp_5fste_2eproto::TableStruct;
  friend void ::protobuf_sp_5fste_2eproto::InitDefaultsPayloadSteSingleMeasurementTxParamsImpl();
};
// -------------------------------------------------------------------

class PayloadSteSingleMeasurementRxParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sp.ste.PayloadSteSingleMeasurementRxParams) */ {
 public:
  PayloadSteSingleMeasurementRxParams();
  virtual ~PayloadSteSingleMeasurementRxParams();

  PayloadSteSingleMeasurementRxParams(const PayloadSteSingleMeasurementRxParams& from);

  inline PayloadSteSingleMeasurementRxParams& operator=(const PayloadSteSingleMeasurementRxParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PayloadSteSingleMeasurementRxParams(PayloadSteSingleMeasurementRxParams&& from) noexcept
    : PayloadSteSingleMeasurementRxParams() {
    *this = ::std::move(from);
  }

  inline PayloadSteSingleMeasurementRxParams& operator=(PayloadSteSingleMeasurementRxParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PayloadSteSingleMeasurementRxParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PayloadSteSingleMeasurementRxParams* internal_default_instance() {
    return reinterpret_cast<const PayloadSteSingleMeasurementRxParams*>(
               &_PayloadSteSingleMeasurementRxParams_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PayloadSteSingleMeasurementRxParams* other);
  friend void swap(PayloadSteSingleMeasurementRxParams& a, PayloadSteSingleMeasurementRxParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PayloadSteSingleMeasurementRxParams* New() const PROTOBUF_FINAL { return New(NULL); }

  PayloadSteSingleMeasurementRxParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PayloadSteSingleMeasurementRxParams& from);
  void MergeFrom(const PayloadSteSingleMeasurementRxParams& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PayloadSteSingleMeasurementRxParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filebasename = 12;
  void clear_filebasename();
  static const int kFilebasenameFieldNumber = 12;
  const ::std::string& filebasename() const;
  void set_filebasename(const ::std::string& value);
  #if LANG_CXX11
  void set_filebasename(::std::string&& value);
  #endif
  void set_filebasename(const char* value);
  void set_filebasename(const char* value, size_t size);
  ::std::string* mutable_filebasename();
  ::std::string* release_filebasename();
  void set_allocated_filebasename(::std::string* filebasename);

  // string filename_fft_a = 13;
  void clear_filename_fft_a();
  static const int kFilenameFftAFieldNumber = 13;
  const ::std::string& filename_fft_a() const;
  void set_filename_fft_a(const ::std::string& value);
  #if LANG_CXX11
  void set_filename_fft_a(::std::string&& value);
  #endif
  void set_filename_fft_a(const char* value);
  void set_filename_fft_a(const char* value, size_t size);
  ::std::string* mutable_filename_fft_a();
  ::std::string* release_filename_fft_a();
  void set_allocated_filename_fft_a(::std::string* filename_fft_a);

  // string filename_fft_b = 14;
  void clear_filename_fft_b();
  static const int kFilenameFftBFieldNumber = 14;
  const ::std::string& filename_fft_b() const;
  void set_filename_fft_b(const ::std::string& value);
  #if LANG_CXX11
  void set_filename_fft_b(::std::string&& value);
  #endif
  void set_filename_fft_b(const char* value);
  void set_filename_fft_b(const char* value, size_t size);
  ::std::string* mutable_filename_fft_b();
  ::std::string* release_filename_fft_b();
  void set_allocated_filename_fft_b(::std::string* filename_fft_b);

  // string filename_rx_samples = 15;
  void clear_filename_rx_samples();
  static const int kFilenameRxSamplesFieldNumber = 15;
  const ::std::string& filename_rx_samples() const;
  void set_filename_rx_samples(const ::std::string& value);
  #if LANG_CXX11
  void set_filename_rx_samples(::std::string&& value);
  #endif
  void set_filename_rx_samples(const char* value);
  void set_filename_rx_samples(const char* value, size_t size);
  ::std::string* mutable_filename_rx_samples();
  ::std::string* release_filename_rx_samples();
  void set_allocated_filename_rx_samples(::std::string* filename_rx_samples);

  // uint32 fft_length_a = 1;
  void clear_fft_length_a();
  static const int kFftLengthAFieldNumber = 1;
  ::google::protobuf::uint32 fft_length_a() const;
  void set_fft_length_a(::google::protobuf::uint32 value);

  // uint32 fft_length_b = 2;
  void clear_fft_length_b();
  static const int kFftLengthBFieldNumber = 2;
  ::google::protobuf::uint32 fft_length_b() const;
  void set_fft_length_b(::google::protobuf::uint32 value);

  // uint32 fft_batches_a = 3;
  void clear_fft_batches_a();
  static const int kFftBatchesAFieldNumber = 3;
  ::google::protobuf::uint32 fft_batches_a() const;
  void set_fft_batches_a(::google::protobuf::uint32 value);

  // uint32 fft_batches_b = 4;
  void clear_fft_batches_b();
  static const int kFftBatchesBFieldNumber = 4;
  ::google::protobuf::uint32 fft_batches_b() const;
  void set_fft_batches_b(::google::protobuf::uint32 value);

  // float rx_rot_freq_Hz = 5;
  void clear_rx_rot_freq_hz();
  static const int kRxRotFreqHzFieldNumber = 5;
  float rx_rot_freq_hz() const;
  void set_rx_rot_freq_hz(float value);

  // uint32 decimation = 6;
  void clear_decimation();
  static const int kDecimationFieldNumber = 6;
  ::google::protobuf::uint32 decimation() const;
  void set_decimation(::google::protobuf::uint32 value);

  // uint32 num_rx_samples = 7;
  void clear_num_rx_samples();
  static const int kNumRxSamplesFieldNumber = 7;
  ::google::protobuf::uint32 num_rx_samples() const;
  void set_num_rx_samples(::google::protobuf::uint32 value);

  // bool save_iq = 8;
  void clear_save_iq();
  static const int kSaveIqFieldNumber = 8;
  bool save_iq() const;
  void set_save_iq(bool value);

  // bool fft_a_enable = 9;
  void clear_fft_a_enable();
  static const int kFftAEnableFieldNumber = 9;
  bool fft_a_enable() const;
  void set_fft_a_enable(bool value);

  // bool fft_b_enable = 10;
  void clear_fft_b_enable();
  static const int kFftBEnableFieldNumber = 10;
  bool fft_b_enable() const;
  void set_fft_b_enable(bool value);

  // bool parameter_estimate_enable = 11;
  void clear_parameter_estimate_enable();
  static const int kParameterEstimateEnableFieldNumber = 11;
  bool parameter_estimate_enable() const;
  void set_parameter_estimate_enable(bool value);

  // uint64 nextRxStartTime = 16;
  void clear_nextrxstarttime();
  static const int kNextRxStartTimeFieldNumber = 16;
  ::google::protobuf::uint64 nextrxstarttime() const;
  void set_nextrxstarttime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sp.ste.PayloadSteSingleMeasurementRxParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filebasename_;
  ::google::protobuf::internal::ArenaStringPtr filename_fft_a_;
  ::google::protobuf::internal::ArenaStringPtr filename_fft_b_;
  ::google::protobuf::internal::ArenaStringPtr filename_rx_samples_;
  ::google::protobuf::uint32 fft_length_a_;
  ::google::protobuf::uint32 fft_length_b_;
  ::google::protobuf::uint32 fft_batches_a_;
  ::google::protobuf::uint32 fft_batches_b_;
  float rx_rot_freq_hz_;
  ::google::protobuf::uint32 decimation_;
  ::google::protobuf::uint32 num_rx_samples_;
  bool save_iq_;
  bool fft_a_enable_;
  bool fft_b_enable_;
  bool parameter_estimate_enable_;
  ::google::protobuf::uint64 nextrxstarttime_;
  mutable int _cached_size_;
  friend struct ::protobuf_sp_5fste_2eproto::TableStruct;
  friend void ::protobuf_sp_5fste_2eproto::InitDefaultsPayloadSteSingleMeasurementRxParamsImpl();
};
// -------------------------------------------------------------------

class null_message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sp.ste.null_message) */ {
 public:
  null_message();
  virtual ~null_message();

  null_message(const null_message& from);

  inline null_message& operator=(const null_message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  null_message(null_message&& from) noexcept
    : null_message() {
    *this = ::std::move(from);
  }

  inline null_message& operator=(null_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const null_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const null_message* internal_default_instance() {
    return reinterpret_cast<const null_message*>(
               &_null_message_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(null_message* other);
  friend void swap(null_message& a, null_message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline null_message* New() const PROTOBUF_FINAL { return New(NULL); }

  null_message* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const null_message& from);
  void MergeFrom(const null_message& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(null_message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sp.ste.null_message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_sp_5fste_2eproto::TableStruct;
  friend void ::protobuf_sp_5fste_2eproto::InitDefaultsnull_messageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// set_parameters

// .sp.ste.TestBedRpcHeader hdr = 1;
inline bool set_parameters::has_hdr() const {
  return this != internal_default_instance() && hdr_ != NULL;
}
inline void set_parameters::clear_hdr() {
  if (GetArenaNoVirtual() == NULL && hdr_ != NULL) {
    delete hdr_;
  }
  hdr_ = NULL;
}
inline const ::sp::ste::TestBedRpcHeader& set_parameters::hdr() const {
  const ::sp::ste::TestBedRpcHeader* p = hdr_;
  // @@protoc_insertion_point(field_get:sp.ste.set_parameters.hdr)
  return p != NULL ? *p : *reinterpret_cast<const ::sp::ste::TestBedRpcHeader*>(
      &::sp::ste::_TestBedRpcHeader_default_instance_);
}
inline ::sp::ste::TestBedRpcHeader* set_parameters::release_hdr() {
  // @@protoc_insertion_point(field_release:sp.ste.set_parameters.hdr)
  
  ::sp::ste::TestBedRpcHeader* temp = hdr_;
  hdr_ = NULL;
  return temp;
}
inline ::sp::ste::TestBedRpcHeader* set_parameters::mutable_hdr() {
  
  if (hdr_ == NULL) {
    hdr_ = new ::sp::ste::TestBedRpcHeader;
  }
  // @@protoc_insertion_point(field_mutable:sp.ste.set_parameters.hdr)
  return hdr_;
}
inline void set_parameters::set_allocated_hdr(::sp::ste::TestBedRpcHeader* hdr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hdr_;
  }
  if (hdr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hdr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:sp.ste.set_parameters.hdr)
}

// .sp.ste.PayloadSteSingleMeasurementRxParams rx = 2;
inline bool set_parameters::has_rx() const {
  return this != internal_default_instance() && rx_ != NULL;
}
inline void set_parameters::clear_rx() {
  if (GetArenaNoVirtual() == NULL && rx_ != NULL) {
    delete rx_;
  }
  rx_ = NULL;
}
inline const ::sp::ste::PayloadSteSingleMeasurementRxParams& set_parameters::rx() const {
  const ::sp::ste::PayloadSteSingleMeasurementRxParams* p = rx_;
  // @@protoc_insertion_point(field_get:sp.ste.set_parameters.rx)
  return p != NULL ? *p : *reinterpret_cast<const ::sp::ste::PayloadSteSingleMeasurementRxParams*>(
      &::sp::ste::_PayloadSteSingleMeasurementRxParams_default_instance_);
}
inline ::sp::ste::PayloadSteSingleMeasurementRxParams* set_parameters::release_rx() {
  // @@protoc_insertion_point(field_release:sp.ste.set_parameters.rx)
  
  ::sp::ste::PayloadSteSingleMeasurementRxParams* temp = rx_;
  rx_ = NULL;
  return temp;
}
inline ::sp::ste::PayloadSteSingleMeasurementRxParams* set_parameters::mutable_rx() {
  
  if (rx_ == NULL) {
    rx_ = new ::sp::ste::PayloadSteSingleMeasurementRxParams;
  }
  // @@protoc_insertion_point(field_mutable:sp.ste.set_parameters.rx)
  return rx_;
}
inline void set_parameters::set_allocated_rx(::sp::ste::PayloadSteSingleMeasurementRxParams* rx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rx_;
  }
  if (rx) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx, submessage_arena);
    }
    
  } else {
    
  }
  rx_ = rx;
  // @@protoc_insertion_point(field_set_allocated:sp.ste.set_parameters.rx)
}

// .sp.ste.PayloadSteSingleMeasurementTxParams tx = 3;
inline bool set_parameters::has_tx() const {
  return this != internal_default_instance() && tx_ != NULL;
}
inline void set_parameters::clear_tx() {
  if (GetArenaNoVirtual() == NULL && tx_ != NULL) {
    delete tx_;
  }
  tx_ = NULL;
}
inline const ::sp::ste::PayloadSteSingleMeasurementTxParams& set_parameters::tx() const {
  const ::sp::ste::PayloadSteSingleMeasurementTxParams* p = tx_;
  // @@protoc_insertion_point(field_get:sp.ste.set_parameters.tx)
  return p != NULL ? *p : *reinterpret_cast<const ::sp::ste::PayloadSteSingleMeasurementTxParams*>(
      &::sp::ste::_PayloadSteSingleMeasurementTxParams_default_instance_);
}
inline ::sp::ste::PayloadSteSingleMeasurementTxParams* set_parameters::release_tx() {
  // @@protoc_insertion_point(field_release:sp.ste.set_parameters.tx)
  
  ::sp::ste::PayloadSteSingleMeasurementTxParams* temp = tx_;
  tx_ = NULL;
  return temp;
}
inline ::sp::ste::PayloadSteSingleMeasurementTxParams* set_parameters::mutable_tx() {
  
  if (tx_ == NULL) {
    tx_ = new ::sp::ste::PayloadSteSingleMeasurementTxParams;
  }
  // @@protoc_insertion_point(field_mutable:sp.ste.set_parameters.tx)
  return tx_;
}
inline void set_parameters::set_allocated_tx(::sp::ste::PayloadSteSingleMeasurementTxParams* tx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tx_;
  }
  if (tx) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx, submessage_arena);
    }
    
  } else {
    
  }
  tx_ = tx;
  // @@protoc_insertion_point(field_set_allocated:sp.ste.set_parameters.tx)
}

// -------------------------------------------------------------------

// parameter_values

// .sp.ste.TestBedRpcHeader hdr = 1;
inline bool parameter_values::has_hdr() const {
  return this != internal_default_instance() && hdr_ != NULL;
}
inline void parameter_values::clear_hdr() {
  if (GetArenaNoVirtual() == NULL && hdr_ != NULL) {
    delete hdr_;
  }
  hdr_ = NULL;
}
inline const ::sp::ste::TestBedRpcHeader& parameter_values::hdr() const {
  const ::sp::ste::TestBedRpcHeader* p = hdr_;
  // @@protoc_insertion_point(field_get:sp.ste.parameter_values.hdr)
  return p != NULL ? *p : *reinterpret_cast<const ::sp::ste::TestBedRpcHeader*>(
      &::sp::ste::_TestBedRpcHeader_default_instance_);
}
inline ::sp::ste::TestBedRpcHeader* parameter_values::release_hdr() {
  // @@protoc_insertion_point(field_release:sp.ste.parameter_values.hdr)
  
  ::sp::ste::TestBedRpcHeader* temp = hdr_;
  hdr_ = NULL;
  return temp;
}
inline ::sp::ste::TestBedRpcHeader* parameter_values::mutable_hdr() {
  
  if (hdr_ == NULL) {
    hdr_ = new ::sp::ste::TestBedRpcHeader;
  }
  // @@protoc_insertion_point(field_mutable:sp.ste.parameter_values.hdr)
  return hdr_;
}
inline void parameter_values::set_allocated_hdr(::sp::ste::TestBedRpcHeader* hdr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hdr_;
  }
  if (hdr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hdr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:sp.ste.parameter_values.hdr)
}

// .sp.ste.PayloadSteSingleMeasurementRxParams rx = 2;
inline bool parameter_values::has_rx() const {
  return this != internal_default_instance() && rx_ != NULL;
}
inline void parameter_values::clear_rx() {
  if (GetArenaNoVirtual() == NULL && rx_ != NULL) {
    delete rx_;
  }
  rx_ = NULL;
}
inline const ::sp::ste::PayloadSteSingleMeasurementRxParams& parameter_values::rx() const {
  const ::sp::ste::PayloadSteSingleMeasurementRxParams* p = rx_;
  // @@protoc_insertion_point(field_get:sp.ste.parameter_values.rx)
  return p != NULL ? *p : *reinterpret_cast<const ::sp::ste::PayloadSteSingleMeasurementRxParams*>(
      &::sp::ste::_PayloadSteSingleMeasurementRxParams_default_instance_);
}
inline ::sp::ste::PayloadSteSingleMeasurementRxParams* parameter_values::release_rx() {
  // @@protoc_insertion_point(field_release:sp.ste.parameter_values.rx)
  
  ::sp::ste::PayloadSteSingleMeasurementRxParams* temp = rx_;
  rx_ = NULL;
  return temp;
}
inline ::sp::ste::PayloadSteSingleMeasurementRxParams* parameter_values::mutable_rx() {
  
  if (rx_ == NULL) {
    rx_ = new ::sp::ste::PayloadSteSingleMeasurementRxParams;
  }
  // @@protoc_insertion_point(field_mutable:sp.ste.parameter_values.rx)
  return rx_;
}
inline void parameter_values::set_allocated_rx(::sp::ste::PayloadSteSingleMeasurementRxParams* rx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rx_;
  }
  if (rx) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx, submessage_arena);
    }
    
  } else {
    
  }
  rx_ = rx;
  // @@protoc_insertion_point(field_set_allocated:sp.ste.parameter_values.rx)
}

// .sp.ste.PayloadSteSingleMeasurementTxParams tx = 3;
inline bool parameter_values::has_tx() const {
  return this != internal_default_instance() && tx_ != NULL;
}
inline void parameter_values::clear_tx() {
  if (GetArenaNoVirtual() == NULL && tx_ != NULL) {
    delete tx_;
  }
  tx_ = NULL;
}
inline const ::sp::ste::PayloadSteSingleMeasurementTxParams& parameter_values::tx() const {
  const ::sp::ste::PayloadSteSingleMeasurementTxParams* p = tx_;
  // @@protoc_insertion_point(field_get:sp.ste.parameter_values.tx)
  return p != NULL ? *p : *reinterpret_cast<const ::sp::ste::PayloadSteSingleMeasurementTxParams*>(
      &::sp::ste::_PayloadSteSingleMeasurementTxParams_default_instance_);
}
inline ::sp::ste::PayloadSteSingleMeasurementTxParams* parameter_values::release_tx() {
  // @@protoc_insertion_point(field_release:sp.ste.parameter_values.tx)
  
  ::sp::ste::PayloadSteSingleMeasurementTxParams* temp = tx_;
  tx_ = NULL;
  return temp;
}
inline ::sp::ste::PayloadSteSingleMeasurementTxParams* parameter_values::mutable_tx() {
  
  if (tx_ == NULL) {
    tx_ = new ::sp::ste::PayloadSteSingleMeasurementTxParams;
  }
  // @@protoc_insertion_point(field_mutable:sp.ste.parameter_values.tx)
  return tx_;
}
inline void parameter_values::set_allocated_tx(::sp::ste::PayloadSteSingleMeasurementTxParams* tx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tx_;
  }
  if (tx) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx, submessage_arena);
    }
    
  } else {
    
  }
  tx_ = tx;
  // @@protoc_insertion_point(field_set_allocated:sp.ste.parameter_values.tx)
}

// -------------------------------------------------------------------

// TestBedRpcHeader

// string module = 1;
inline void TestBedRpcHeader::clear_module() {
  module_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestBedRpcHeader::module() const {
  // @@protoc_insertion_point(field_get:sp.ste.TestBedRpcHeader.module)
  return module_.GetNoArena();
}
inline void TestBedRpcHeader::set_module(const ::std::string& value) {
  
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sp.ste.TestBedRpcHeader.module)
}
#if LANG_CXX11
inline void TestBedRpcHeader::set_module(::std::string&& value) {
  
  module_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sp.ste.TestBedRpcHeader.module)
}
#endif
inline void TestBedRpcHeader::set_module(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sp.ste.TestBedRpcHeader.module)
}
inline void TestBedRpcHeader::set_module(const char* value, size_t size) {
  
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sp.ste.TestBedRpcHeader.module)
}
inline ::std::string* TestBedRpcHeader::mutable_module() {
  
  // @@protoc_insertion_point(field_mutable:sp.ste.TestBedRpcHeader.module)
  return module_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestBedRpcHeader::release_module() {
  // @@protoc_insertion_point(field_release:sp.ste.TestBedRpcHeader.module)
  
  return module_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestBedRpcHeader::set_allocated_module(::std::string* module) {
  if (module != NULL) {
    
  } else {
    
  }
  module_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module);
  // @@protoc_insertion_point(field_set_allocated:sp.ste.TestBedRpcHeader.module)
}

// int32 core = 2;
inline void TestBedRpcHeader::clear_core() {
  core_ = 0;
}
inline ::google::protobuf::int32 TestBedRpcHeader::core() const {
  // @@protoc_insertion_point(field_get:sp.ste.TestBedRpcHeader.core)
  return core_;
}
inline void TestBedRpcHeader::set_core(::google::protobuf::int32 value) {
  
  core_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.TestBedRpcHeader.core)
}

// -------------------------------------------------------------------

// PayloadSteSingleMeasurementTxParams

// float tx_freq1_Hz = 1;
inline void PayloadSteSingleMeasurementTxParams::clear_tx_freq1_hz() {
  tx_freq1_hz_ = 0;
}
inline float PayloadSteSingleMeasurementTxParams::tx_freq1_hz() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementTxParams.tx_freq1_Hz)
  return tx_freq1_hz_;
}
inline void PayloadSteSingleMeasurementTxParams::set_tx_freq1_hz(float value) {
  
  tx_freq1_hz_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementTxParams.tx_freq1_Hz)
}

// float tx_phase1_rot = 2;
inline void PayloadSteSingleMeasurementTxParams::clear_tx_phase1_rot() {
  tx_phase1_rot_ = 0;
}
inline float PayloadSteSingleMeasurementTxParams::tx_phase1_rot() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementTxParams.tx_phase1_rot)
  return tx_phase1_rot_;
}
inline void PayloadSteSingleMeasurementTxParams::set_tx_phase1_rot(float value) {
  
  tx_phase1_rot_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementTxParams.tx_phase1_rot)
}

// float tx_freq2_Hz = 3;
inline void PayloadSteSingleMeasurementTxParams::clear_tx_freq2_hz() {
  tx_freq2_hz_ = 0;
}
inline float PayloadSteSingleMeasurementTxParams::tx_freq2_hz() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementTxParams.tx_freq2_Hz)
  return tx_freq2_hz_;
}
inline void PayloadSteSingleMeasurementTxParams::set_tx_freq2_hz(float value) {
  
  tx_freq2_hz_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementTxParams.tx_freq2_Hz)
}

// float tx_phase2_rot = 4;
inline void PayloadSteSingleMeasurementTxParams::clear_tx_phase2_rot() {
  tx_phase2_rot_ = 0;
}
inline float PayloadSteSingleMeasurementTxParams::tx_phase2_rot() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementTxParams.tx_phase2_rot)
  return tx_phase2_rot_;
}
inline void PayloadSteSingleMeasurementTxParams::set_tx_phase2_rot(float value) {
  
  tx_phase2_rot_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementTxParams.tx_phase2_rot)
}

// float gain1 = 5;
inline void PayloadSteSingleMeasurementTxParams::clear_gain1() {
  gain1_ = 0;
}
inline float PayloadSteSingleMeasurementTxParams::gain1() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementTxParams.gain1)
  return gain1_;
}
inline void PayloadSteSingleMeasurementTxParams::set_gain1(float value) {
  
  gain1_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementTxParams.gain1)
}

// float gain2 = 6;
inline void PayloadSteSingleMeasurementTxParams::clear_gain2() {
  gain2_ = 0;
}
inline float PayloadSteSingleMeasurementTxParams::gain2() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementTxParams.gain2)
  return gain2_;
}
inline void PayloadSteSingleMeasurementTxParams::set_gain2(float value) {
  
  gain2_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementTxParams.gain2)
}

// float gain3 = 7;
inline void PayloadSteSingleMeasurementTxParams::clear_gain3() {
  gain3_ = 0;
}
inline float PayloadSteSingleMeasurementTxParams::gain3() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementTxParams.gain3)
  return gain3_;
}
inline void PayloadSteSingleMeasurementTxParams::set_gain3(float value) {
  
  gain3_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementTxParams.gain3)
}

// bool awgn_enable = 8;
inline void PayloadSteSingleMeasurementTxParams::clear_awgn_enable() {
  awgn_enable_ = false;
}
inline bool PayloadSteSingleMeasurementTxParams::awgn_enable() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementTxParams.awgn_enable)
  return awgn_enable_;
}
inline void PayloadSteSingleMeasurementTxParams::set_awgn_enable(bool value) {
  
  awgn_enable_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementTxParams.awgn_enable)
}

// bool notch_enable = 9;
inline void PayloadSteSingleMeasurementTxParams::clear_notch_enable() {
  notch_enable_ = false;
}
inline bool PayloadSteSingleMeasurementTxParams::notch_enable() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementTxParams.notch_enable)
  return notch_enable_;
}
inline void PayloadSteSingleMeasurementTxParams::set_notch_enable(bool value) {
  
  notch_enable_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementTxParams.notch_enable)
}

// uint32 num_tx_samples_total = 10;
inline void PayloadSteSingleMeasurementTxParams::clear_num_tx_samples_total() {
  num_tx_samples_total_ = 0u;
}
inline ::google::protobuf::uint32 PayloadSteSingleMeasurementTxParams::num_tx_samples_total() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementTxParams.num_tx_samples_total)
  return num_tx_samples_total_;
}
inline void PayloadSteSingleMeasurementTxParams::set_num_tx_samples_total(::google::protobuf::uint32 value) {
  
  num_tx_samples_total_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementTxParams.num_tx_samples_total)
}

// uint32 num_tx_samples_per_batch = 11;
inline void PayloadSteSingleMeasurementTxParams::clear_num_tx_samples_per_batch() {
  num_tx_samples_per_batch_ = 0u;
}
inline ::google::protobuf::uint32 PayloadSteSingleMeasurementTxParams::num_tx_samples_per_batch() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementTxParams.num_tx_samples_per_batch)
  return num_tx_samples_per_batch_;
}
inline void PayloadSteSingleMeasurementTxParams::set_num_tx_samples_per_batch(::google::protobuf::uint32 value) {
  
  num_tx_samples_per_batch_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementTxParams.num_tx_samples_per_batch)
}

// string filebasename = 12;
inline void PayloadSteSingleMeasurementTxParams::clear_filebasename() {
  filebasename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PayloadSteSingleMeasurementTxParams::filebasename() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementTxParams.filebasename)
  return filebasename_.GetNoArena();
}
inline void PayloadSteSingleMeasurementTxParams::set_filebasename(const ::std::string& value) {
  
  filebasename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementTxParams.filebasename)
}
#if LANG_CXX11
inline void PayloadSteSingleMeasurementTxParams::set_filebasename(::std::string&& value) {
  
  filebasename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sp.ste.PayloadSteSingleMeasurementTxParams.filebasename)
}
#endif
inline void PayloadSteSingleMeasurementTxParams::set_filebasename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filebasename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sp.ste.PayloadSteSingleMeasurementTxParams.filebasename)
}
inline void PayloadSteSingleMeasurementTxParams::set_filebasename(const char* value, size_t size) {
  
  filebasename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sp.ste.PayloadSteSingleMeasurementTxParams.filebasename)
}
inline ::std::string* PayloadSteSingleMeasurementTxParams::mutable_filebasename() {
  
  // @@protoc_insertion_point(field_mutable:sp.ste.PayloadSteSingleMeasurementTxParams.filebasename)
  return filebasename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PayloadSteSingleMeasurementTxParams::release_filebasename() {
  // @@protoc_insertion_point(field_release:sp.ste.PayloadSteSingleMeasurementTxParams.filebasename)
  
  return filebasename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PayloadSteSingleMeasurementTxParams::set_allocated_filebasename(::std::string* filebasename) {
  if (filebasename != NULL) {
    
  } else {
    
  }
  filebasename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filebasename);
  // @@protoc_insertion_point(field_set_allocated:sp.ste.PayloadSteSingleMeasurementTxParams.filebasename)
}

// string filename_tx_samples = 13;
inline void PayloadSteSingleMeasurementTxParams::clear_filename_tx_samples() {
  filename_tx_samples_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PayloadSteSingleMeasurementTxParams::filename_tx_samples() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementTxParams.filename_tx_samples)
  return filename_tx_samples_.GetNoArena();
}
inline void PayloadSteSingleMeasurementTxParams::set_filename_tx_samples(const ::std::string& value) {
  
  filename_tx_samples_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementTxParams.filename_tx_samples)
}
#if LANG_CXX11
inline void PayloadSteSingleMeasurementTxParams::set_filename_tx_samples(::std::string&& value) {
  
  filename_tx_samples_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sp.ste.PayloadSteSingleMeasurementTxParams.filename_tx_samples)
}
#endif
inline void PayloadSteSingleMeasurementTxParams::set_filename_tx_samples(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_tx_samples_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sp.ste.PayloadSteSingleMeasurementTxParams.filename_tx_samples)
}
inline void PayloadSteSingleMeasurementTxParams::set_filename_tx_samples(const char* value, size_t size) {
  
  filename_tx_samples_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sp.ste.PayloadSteSingleMeasurementTxParams.filename_tx_samples)
}
inline ::std::string* PayloadSteSingleMeasurementTxParams::mutable_filename_tx_samples() {
  
  // @@protoc_insertion_point(field_mutable:sp.ste.PayloadSteSingleMeasurementTxParams.filename_tx_samples)
  return filename_tx_samples_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PayloadSteSingleMeasurementTxParams::release_filename_tx_samples() {
  // @@protoc_insertion_point(field_release:sp.ste.PayloadSteSingleMeasurementTxParams.filename_tx_samples)
  
  return filename_tx_samples_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PayloadSteSingleMeasurementTxParams::set_allocated_filename_tx_samples(::std::string* filename_tx_samples) {
  if (filename_tx_samples != NULL) {
    
  } else {
    
  }
  filename_tx_samples_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename_tx_samples);
  // @@protoc_insertion_point(field_set_allocated:sp.ste.PayloadSteSingleMeasurementTxParams.filename_tx_samples)
}

// uint64 nextTxStartTime = 14;
inline void PayloadSteSingleMeasurementTxParams::clear_nexttxstarttime() {
  nexttxstarttime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PayloadSteSingleMeasurementTxParams::nexttxstarttime() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementTxParams.nextTxStartTime)
  return nexttxstarttime_;
}
inline void PayloadSteSingleMeasurementTxParams::set_nexttxstarttime(::google::protobuf::uint64 value) {
  
  nexttxstarttime_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementTxParams.nextTxStartTime)
}

// .sp.ste.TxIdlePattern tx_idle_pattern = 15;
inline void PayloadSteSingleMeasurementTxParams::clear_tx_idle_pattern() {
  tx_idle_pattern_ = 0;
}
inline ::sp::ste::TxIdlePattern PayloadSteSingleMeasurementTxParams::tx_idle_pattern() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementTxParams.tx_idle_pattern)
  return static_cast< ::sp::ste::TxIdlePattern >(tx_idle_pattern_);
}
inline void PayloadSteSingleMeasurementTxParams::set_tx_idle_pattern(::sp::ste::TxIdlePattern value) {
  
  tx_idle_pattern_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementTxParams.tx_idle_pattern)
}

// -------------------------------------------------------------------

// PayloadSteSingleMeasurementRxParams

// uint32 fft_length_a = 1;
inline void PayloadSteSingleMeasurementRxParams::clear_fft_length_a() {
  fft_length_a_ = 0u;
}
inline ::google::protobuf::uint32 PayloadSteSingleMeasurementRxParams::fft_length_a() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementRxParams.fft_length_a)
  return fft_length_a_;
}
inline void PayloadSteSingleMeasurementRxParams::set_fft_length_a(::google::protobuf::uint32 value) {
  
  fft_length_a_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementRxParams.fft_length_a)
}

// uint32 fft_length_b = 2;
inline void PayloadSteSingleMeasurementRxParams::clear_fft_length_b() {
  fft_length_b_ = 0u;
}
inline ::google::protobuf::uint32 PayloadSteSingleMeasurementRxParams::fft_length_b() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementRxParams.fft_length_b)
  return fft_length_b_;
}
inline void PayloadSteSingleMeasurementRxParams::set_fft_length_b(::google::protobuf::uint32 value) {
  
  fft_length_b_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementRxParams.fft_length_b)
}

// uint32 fft_batches_a = 3;
inline void PayloadSteSingleMeasurementRxParams::clear_fft_batches_a() {
  fft_batches_a_ = 0u;
}
inline ::google::protobuf::uint32 PayloadSteSingleMeasurementRxParams::fft_batches_a() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementRxParams.fft_batches_a)
  return fft_batches_a_;
}
inline void PayloadSteSingleMeasurementRxParams::set_fft_batches_a(::google::protobuf::uint32 value) {
  
  fft_batches_a_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementRxParams.fft_batches_a)
}

// uint32 fft_batches_b = 4;
inline void PayloadSteSingleMeasurementRxParams::clear_fft_batches_b() {
  fft_batches_b_ = 0u;
}
inline ::google::protobuf::uint32 PayloadSteSingleMeasurementRxParams::fft_batches_b() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementRxParams.fft_batches_b)
  return fft_batches_b_;
}
inline void PayloadSteSingleMeasurementRxParams::set_fft_batches_b(::google::protobuf::uint32 value) {
  
  fft_batches_b_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementRxParams.fft_batches_b)
}

// float rx_rot_freq_Hz = 5;
inline void PayloadSteSingleMeasurementRxParams::clear_rx_rot_freq_hz() {
  rx_rot_freq_hz_ = 0;
}
inline float PayloadSteSingleMeasurementRxParams::rx_rot_freq_hz() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementRxParams.rx_rot_freq_Hz)
  return rx_rot_freq_hz_;
}
inline void PayloadSteSingleMeasurementRxParams::set_rx_rot_freq_hz(float value) {
  
  rx_rot_freq_hz_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementRxParams.rx_rot_freq_Hz)
}

// uint32 decimation = 6;
inline void PayloadSteSingleMeasurementRxParams::clear_decimation() {
  decimation_ = 0u;
}
inline ::google::protobuf::uint32 PayloadSteSingleMeasurementRxParams::decimation() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementRxParams.decimation)
  return decimation_;
}
inline void PayloadSteSingleMeasurementRxParams::set_decimation(::google::protobuf::uint32 value) {
  
  decimation_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementRxParams.decimation)
}

// uint32 num_rx_samples = 7;
inline void PayloadSteSingleMeasurementRxParams::clear_num_rx_samples() {
  num_rx_samples_ = 0u;
}
inline ::google::protobuf::uint32 PayloadSteSingleMeasurementRxParams::num_rx_samples() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementRxParams.num_rx_samples)
  return num_rx_samples_;
}
inline void PayloadSteSingleMeasurementRxParams::set_num_rx_samples(::google::protobuf::uint32 value) {
  
  num_rx_samples_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementRxParams.num_rx_samples)
}

// bool save_iq = 8;
inline void PayloadSteSingleMeasurementRxParams::clear_save_iq() {
  save_iq_ = false;
}
inline bool PayloadSteSingleMeasurementRxParams::save_iq() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementRxParams.save_iq)
  return save_iq_;
}
inline void PayloadSteSingleMeasurementRxParams::set_save_iq(bool value) {
  
  save_iq_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementRxParams.save_iq)
}

// bool fft_a_enable = 9;
inline void PayloadSteSingleMeasurementRxParams::clear_fft_a_enable() {
  fft_a_enable_ = false;
}
inline bool PayloadSteSingleMeasurementRxParams::fft_a_enable() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementRxParams.fft_a_enable)
  return fft_a_enable_;
}
inline void PayloadSteSingleMeasurementRxParams::set_fft_a_enable(bool value) {
  
  fft_a_enable_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementRxParams.fft_a_enable)
}

// bool fft_b_enable = 10;
inline void PayloadSteSingleMeasurementRxParams::clear_fft_b_enable() {
  fft_b_enable_ = false;
}
inline bool PayloadSteSingleMeasurementRxParams::fft_b_enable() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementRxParams.fft_b_enable)
  return fft_b_enable_;
}
inline void PayloadSteSingleMeasurementRxParams::set_fft_b_enable(bool value) {
  
  fft_b_enable_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementRxParams.fft_b_enable)
}

// bool parameter_estimate_enable = 11;
inline void PayloadSteSingleMeasurementRxParams::clear_parameter_estimate_enable() {
  parameter_estimate_enable_ = false;
}
inline bool PayloadSteSingleMeasurementRxParams::parameter_estimate_enable() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementRxParams.parameter_estimate_enable)
  return parameter_estimate_enable_;
}
inline void PayloadSteSingleMeasurementRxParams::set_parameter_estimate_enable(bool value) {
  
  parameter_estimate_enable_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementRxParams.parameter_estimate_enable)
}

// string filebasename = 12;
inline void PayloadSteSingleMeasurementRxParams::clear_filebasename() {
  filebasename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PayloadSteSingleMeasurementRxParams::filebasename() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementRxParams.filebasename)
  return filebasename_.GetNoArena();
}
inline void PayloadSteSingleMeasurementRxParams::set_filebasename(const ::std::string& value) {
  
  filebasename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementRxParams.filebasename)
}
#if LANG_CXX11
inline void PayloadSteSingleMeasurementRxParams::set_filebasename(::std::string&& value) {
  
  filebasename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sp.ste.PayloadSteSingleMeasurementRxParams.filebasename)
}
#endif
inline void PayloadSteSingleMeasurementRxParams::set_filebasename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filebasename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sp.ste.PayloadSteSingleMeasurementRxParams.filebasename)
}
inline void PayloadSteSingleMeasurementRxParams::set_filebasename(const char* value, size_t size) {
  
  filebasename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sp.ste.PayloadSteSingleMeasurementRxParams.filebasename)
}
inline ::std::string* PayloadSteSingleMeasurementRxParams::mutable_filebasename() {
  
  // @@protoc_insertion_point(field_mutable:sp.ste.PayloadSteSingleMeasurementRxParams.filebasename)
  return filebasename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PayloadSteSingleMeasurementRxParams::release_filebasename() {
  // @@protoc_insertion_point(field_release:sp.ste.PayloadSteSingleMeasurementRxParams.filebasename)
  
  return filebasename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PayloadSteSingleMeasurementRxParams::set_allocated_filebasename(::std::string* filebasename) {
  if (filebasename != NULL) {
    
  } else {
    
  }
  filebasename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filebasename);
  // @@protoc_insertion_point(field_set_allocated:sp.ste.PayloadSteSingleMeasurementRxParams.filebasename)
}

// string filename_fft_a = 13;
inline void PayloadSteSingleMeasurementRxParams::clear_filename_fft_a() {
  filename_fft_a_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PayloadSteSingleMeasurementRxParams::filename_fft_a() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementRxParams.filename_fft_a)
  return filename_fft_a_.GetNoArena();
}
inline void PayloadSteSingleMeasurementRxParams::set_filename_fft_a(const ::std::string& value) {
  
  filename_fft_a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementRxParams.filename_fft_a)
}
#if LANG_CXX11
inline void PayloadSteSingleMeasurementRxParams::set_filename_fft_a(::std::string&& value) {
  
  filename_fft_a_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sp.ste.PayloadSteSingleMeasurementRxParams.filename_fft_a)
}
#endif
inline void PayloadSteSingleMeasurementRxParams::set_filename_fft_a(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_fft_a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sp.ste.PayloadSteSingleMeasurementRxParams.filename_fft_a)
}
inline void PayloadSteSingleMeasurementRxParams::set_filename_fft_a(const char* value, size_t size) {
  
  filename_fft_a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sp.ste.PayloadSteSingleMeasurementRxParams.filename_fft_a)
}
inline ::std::string* PayloadSteSingleMeasurementRxParams::mutable_filename_fft_a() {
  
  // @@protoc_insertion_point(field_mutable:sp.ste.PayloadSteSingleMeasurementRxParams.filename_fft_a)
  return filename_fft_a_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PayloadSteSingleMeasurementRxParams::release_filename_fft_a() {
  // @@protoc_insertion_point(field_release:sp.ste.PayloadSteSingleMeasurementRxParams.filename_fft_a)
  
  return filename_fft_a_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PayloadSteSingleMeasurementRxParams::set_allocated_filename_fft_a(::std::string* filename_fft_a) {
  if (filename_fft_a != NULL) {
    
  } else {
    
  }
  filename_fft_a_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename_fft_a);
  // @@protoc_insertion_point(field_set_allocated:sp.ste.PayloadSteSingleMeasurementRxParams.filename_fft_a)
}

// string filename_fft_b = 14;
inline void PayloadSteSingleMeasurementRxParams::clear_filename_fft_b() {
  filename_fft_b_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PayloadSteSingleMeasurementRxParams::filename_fft_b() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementRxParams.filename_fft_b)
  return filename_fft_b_.GetNoArena();
}
inline void PayloadSteSingleMeasurementRxParams::set_filename_fft_b(const ::std::string& value) {
  
  filename_fft_b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementRxParams.filename_fft_b)
}
#if LANG_CXX11
inline void PayloadSteSingleMeasurementRxParams::set_filename_fft_b(::std::string&& value) {
  
  filename_fft_b_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sp.ste.PayloadSteSingleMeasurementRxParams.filename_fft_b)
}
#endif
inline void PayloadSteSingleMeasurementRxParams::set_filename_fft_b(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_fft_b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sp.ste.PayloadSteSingleMeasurementRxParams.filename_fft_b)
}
inline void PayloadSteSingleMeasurementRxParams::set_filename_fft_b(const char* value, size_t size) {
  
  filename_fft_b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sp.ste.PayloadSteSingleMeasurementRxParams.filename_fft_b)
}
inline ::std::string* PayloadSteSingleMeasurementRxParams::mutable_filename_fft_b() {
  
  // @@protoc_insertion_point(field_mutable:sp.ste.PayloadSteSingleMeasurementRxParams.filename_fft_b)
  return filename_fft_b_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PayloadSteSingleMeasurementRxParams::release_filename_fft_b() {
  // @@protoc_insertion_point(field_release:sp.ste.PayloadSteSingleMeasurementRxParams.filename_fft_b)
  
  return filename_fft_b_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PayloadSteSingleMeasurementRxParams::set_allocated_filename_fft_b(::std::string* filename_fft_b) {
  if (filename_fft_b != NULL) {
    
  } else {
    
  }
  filename_fft_b_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename_fft_b);
  // @@protoc_insertion_point(field_set_allocated:sp.ste.PayloadSteSingleMeasurementRxParams.filename_fft_b)
}

// string filename_rx_samples = 15;
inline void PayloadSteSingleMeasurementRxParams::clear_filename_rx_samples() {
  filename_rx_samples_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PayloadSteSingleMeasurementRxParams::filename_rx_samples() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementRxParams.filename_rx_samples)
  return filename_rx_samples_.GetNoArena();
}
inline void PayloadSteSingleMeasurementRxParams::set_filename_rx_samples(const ::std::string& value) {
  
  filename_rx_samples_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementRxParams.filename_rx_samples)
}
#if LANG_CXX11
inline void PayloadSteSingleMeasurementRxParams::set_filename_rx_samples(::std::string&& value) {
  
  filename_rx_samples_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sp.ste.PayloadSteSingleMeasurementRxParams.filename_rx_samples)
}
#endif
inline void PayloadSteSingleMeasurementRxParams::set_filename_rx_samples(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_rx_samples_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sp.ste.PayloadSteSingleMeasurementRxParams.filename_rx_samples)
}
inline void PayloadSteSingleMeasurementRxParams::set_filename_rx_samples(const char* value, size_t size) {
  
  filename_rx_samples_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sp.ste.PayloadSteSingleMeasurementRxParams.filename_rx_samples)
}
inline ::std::string* PayloadSteSingleMeasurementRxParams::mutable_filename_rx_samples() {
  
  // @@protoc_insertion_point(field_mutable:sp.ste.PayloadSteSingleMeasurementRxParams.filename_rx_samples)
  return filename_rx_samples_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PayloadSteSingleMeasurementRxParams::release_filename_rx_samples() {
  // @@protoc_insertion_point(field_release:sp.ste.PayloadSteSingleMeasurementRxParams.filename_rx_samples)
  
  return filename_rx_samples_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PayloadSteSingleMeasurementRxParams::set_allocated_filename_rx_samples(::std::string* filename_rx_samples) {
  if (filename_rx_samples != NULL) {
    
  } else {
    
  }
  filename_rx_samples_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename_rx_samples);
  // @@protoc_insertion_point(field_set_allocated:sp.ste.PayloadSteSingleMeasurementRxParams.filename_rx_samples)
}

// uint64 nextRxStartTime = 16;
inline void PayloadSteSingleMeasurementRxParams::clear_nextrxstarttime() {
  nextrxstarttime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PayloadSteSingleMeasurementRxParams::nextrxstarttime() const {
  // @@protoc_insertion_point(field_get:sp.ste.PayloadSteSingleMeasurementRxParams.nextRxStartTime)
  return nextrxstarttime_;
}
inline void PayloadSteSingleMeasurementRxParams::set_nextrxstarttime(::google::protobuf::uint64 value) {
  
  nextrxstarttime_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.PayloadSteSingleMeasurementRxParams.nextRxStartTime)
}

// -------------------------------------------------------------------

// null_message

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ste
}  // namespace sp

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sp::ste::TxIdlePattern> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sp::ste::TxIdlePattern>() {
  return ::sp::ste::TxIdlePattern_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sp_5fste_2eproto__INCLUDED

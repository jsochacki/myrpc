// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sp_ste.proto

#include "sp_ste.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace sp {
namespace ste {
class set_parametersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<set_parameters>
      _instance;
} _set_parameters_default_instance_;
class parameter_valuesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<parameter_values>
      _instance;
} _parameter_values_default_instance_;
class state_parametersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<state_parameters>
      _instance;
} _state_parameters_default_instance_;
class tx_parametersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<tx_parameters>
      _instance;
} _tx_parameters_default_instance_;
class fft_parametersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<fft_parameters>
      _instance;
} _fft_parameters_default_instance_;
class other_parametersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<other_parameters>
      _instance;
} _other_parameters_default_instance_;
}  // namespace ste
}  // namespace sp
namespace protobuf_sp_5fste_2eproto {
void InitDefaultsset_parametersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_sp_5fste_2eproto::InitDefaultsstate_parameters();
  protobuf_sp_5fste_2eproto::InitDefaultstx_parameters();
  protobuf_sp_5fste_2eproto::InitDefaultsfft_parameters();
  protobuf_sp_5fste_2eproto::InitDefaultsother_parameters();
  {
    void* ptr = &::sp::ste::_set_parameters_default_instance_;
    new (ptr) ::sp::ste::set_parameters();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sp::ste::set_parameters::InitAsDefaultInstance();
}

void InitDefaultsset_parameters() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsset_parametersImpl);
}

void InitDefaultsparameter_valuesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_sp_5fste_2eproto::InitDefaultsstate_parameters();
  protobuf_sp_5fste_2eproto::InitDefaultstx_parameters();
  protobuf_sp_5fste_2eproto::InitDefaultsfft_parameters();
  protobuf_sp_5fste_2eproto::InitDefaultsother_parameters();
  {
    void* ptr = &::sp::ste::_parameter_values_default_instance_;
    new (ptr) ::sp::ste::parameter_values();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sp::ste::parameter_values::InitAsDefaultInstance();
}

void InitDefaultsparameter_values() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsparameter_valuesImpl);
}

void InitDefaultsstate_parametersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::sp::ste::_state_parameters_default_instance_;
    new (ptr) ::sp::ste::state_parameters();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sp::ste::state_parameters::InitAsDefaultInstance();
}

void InitDefaultsstate_parameters() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsstate_parametersImpl);
}

void InitDefaultstx_parametersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::sp::ste::_tx_parameters_default_instance_;
    new (ptr) ::sp::ste::tx_parameters();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sp::ste::tx_parameters::InitAsDefaultInstance();
}

void InitDefaultstx_parameters() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultstx_parametersImpl);
}

void InitDefaultsfft_parametersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::sp::ste::_fft_parameters_default_instance_;
    new (ptr) ::sp::ste::fft_parameters();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sp::ste::fft_parameters::InitAsDefaultInstance();
}

void InitDefaultsfft_parameters() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsfft_parametersImpl);
}

void InitDefaultsother_parametersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::sp::ste::_other_parameters_default_instance_;
    new (ptr) ::sp::ste::other_parameters();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sp::ste::other_parameters::InitAsDefaultInstance();
}

void InitDefaultsother_parameters() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsother_parametersImpl);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::set_parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::set_parameters, state_parameters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::set_parameters, tx_parameters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::set_parameters, fft_parameters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::set_parameters, other_parameters_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::parameter_values, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::parameter_values, state_parameters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::parameter_values, tx_parameters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::parameter_values, fft_parameters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::parameter_values, other_parameters_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::state_parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::state_parameters, save_iq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::state_parameters, parameter_estimate_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::state_parameters, awgn_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::state_parameters, notch_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::state_parameters, fft_a_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::state_parameters, fft_b_enable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::tx_parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::tx_parameters, num_tx_samples_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::tx_parameters, tx_freq1_hz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::tx_parameters, tx_freq2_hz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::tx_parameters, tx_phase1_rot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::tx_parameters, tx_phase2_rot_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::fft_parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::fft_parameters, fft_length_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::fft_parameters, fft_batches_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::fft_parameters, fft_length_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::fft_parameters, fft_batches_b_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::other_parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::other_parameters, num_rx_samples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::other_parameters, rx_rot_freq_hz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::other_parameters, decimation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::other_parameters, gain1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::other_parameters, gain2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::other_parameters, nexttxstarttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::other_parameters, nextrxstarttime_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sp::ste::set_parameters)},
  { 9, -1, sizeof(::sp::ste::parameter_values)},
  { 18, -1, sizeof(::sp::ste::state_parameters)},
  { 29, -1, sizeof(::sp::ste::tx_parameters)},
  { 39, -1, sizeof(::sp::ste::fft_parameters)},
  { 48, -1, sizeof(::sp::ste::other_parameters)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sp::ste::_set_parameters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sp::ste::_parameter_values_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sp::ste::_state_parameters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sp::ste::_tx_parameters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sp::ste::_fft_parameters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sp::ste::_other_parameters_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sp_ste.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014sp_ste.proto\022\006sp.ste\"\326\001\n\016set_parameter"
      "s\0222\n\020state_parameters\030\001 \001(\0132\030.sp.ste.sta"
      "te_parameters\022,\n\rtx_parameters\030\002 \001(\0132\025.s"
      "p.ste.tx_parameters\022.\n\016fft_parameters\030\003 "
      "\001(\0132\026.sp.ste.fft_parameters\0222\n\020other_par"
      "ameters\030\004 \001(\0132\030.sp.ste.other_parameters\""
      "\330\001\n\020parameter_values\0222\n\020state_parameters"
      "\030\001 \001(\0132\030.sp.ste.state_parameters\022,\n\rtx_p"
      "arameters\030\002 \001(\0132\025.sp.ste.tx_parameters\022."
      "\n\016fft_parameters\030\003 \001(\0132\026.sp.ste.fft_para"
      "meters\0222\n\020other_parameters\030\004 \001(\0132\030.sp.st"
      "e.other_parameters\"\350\001\n\020state_parameters\022"
      "\017\n\007save_iq\030\001 \001(\010\0220\n\031parameter_estimate_e"
      "nable\030\002 \001(\0162\r.sp.ste.state\022\"\n\013awgn_enabl"
      "e\030\003 \001(\0162\r.sp.ste.state\022#\n\014notch_enable\030\004"
      " \001(\0162\r.sp.ste.state\022#\n\014fft_a_enable\030\005 \001("
      "\0162\r.sp.ste.state\022#\n\014fft_b_enable\030\006 \001(\0162\r"
      ".sp.ste.state\"\205\001\n\rtx_parameters\022\034\n\024num_t"
      "x_samples_total\030\001 \001(\001\022\023\n\013tx_freq1_Hz\030\002 \001"
      "(\001\022\023\n\013tx_freq2_Hz\030\003 \001(\001\022\025\n\rtx_phase1_rot"
      "\030\004 \001(\001\022\025\n\rtx_phase2_rot\030\005 \001(\001\"j\n\016fft_par"
      "ameters\022\024\n\014fft_length_a\030\001 \001(\r\022\025\n\rfft_bat"
      "ches_a\030\002 \001(\r\022\024\n\014fft_length_b\030\003 \001(\r\022\025\n\rff"
      "t_batches_b\030\004 \001(\r\"\246\001\n\020other_parameters\022\026"
      "\n\016num_rx_samples\030\001 \001(\001\022\026\n\016rx_rot_freq_Hz"
      "\030\002 \001(\001\022\022\n\ndecimation\030\003 \001(\r\022\r\n\005gain1\030\004 \001("
      "\r\022\r\n\005gain2\030\005 \001(\r\022\027\n\017nextTxStartTime\030\006 \001("
      "\001\022\027\n\017nextRxStartTime\030\007 \001(\001*r\n\005state\022\014\n\010D"
      "ISABLED\020\000\022\007\n\003OFF\020\000\022\016\n\nNOTRUNNING\020\000\022\014\n\010CO"
      "MPLETE\020\000\022\013\n\007ENABLED\020\001\022\006\n\002ON\020\001\022\013\n\007RUNNING"
      "\020\001\022\016\n\nINCOMPLETE\020\001\032\002\020\0012M\n\016sp_ste_control"
      "\022;\n\005setup\022\026.sp.ste.set_parameters\032\030.sp.s"
      "te.parameter_values\"\000B+\n\027io.grpc.example"
      "s.sp_steB\014sp_ste_protoH\001P\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1354);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sp_ste.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sp_5fste_2eproto
namespace sp {
namespace ste {
const ::google::protobuf::EnumDescriptor* state_descriptor() {
  protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sp_5fste_2eproto::file_level_enum_descriptors[0];
}
bool state_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void set_parameters::InitAsDefaultInstance() {
  ::sp::ste::_set_parameters_default_instance_._instance.get_mutable()->state_parameters_ = const_cast< ::sp::ste::state_parameters*>(
      ::sp::ste::state_parameters::internal_default_instance());
  ::sp::ste::_set_parameters_default_instance_._instance.get_mutable()->tx_parameters_ = const_cast< ::sp::ste::tx_parameters*>(
      ::sp::ste::tx_parameters::internal_default_instance());
  ::sp::ste::_set_parameters_default_instance_._instance.get_mutable()->fft_parameters_ = const_cast< ::sp::ste::fft_parameters*>(
      ::sp::ste::fft_parameters::internal_default_instance());
  ::sp::ste::_set_parameters_default_instance_._instance.get_mutable()->other_parameters_ = const_cast< ::sp::ste::other_parameters*>(
      ::sp::ste::other_parameters::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int set_parameters::kStateParametersFieldNumber;
const int set_parameters::kTxParametersFieldNumber;
const int set_parameters::kFftParametersFieldNumber;
const int set_parameters::kOtherParametersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

set_parameters::set_parameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sp_5fste_2eproto::InitDefaultsset_parameters();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sp.ste.set_parameters)
}
set_parameters::set_parameters(const set_parameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state_parameters()) {
    state_parameters_ = new ::sp::ste::state_parameters(*from.state_parameters_);
  } else {
    state_parameters_ = NULL;
  }
  if (from.has_tx_parameters()) {
    tx_parameters_ = new ::sp::ste::tx_parameters(*from.tx_parameters_);
  } else {
    tx_parameters_ = NULL;
  }
  if (from.has_fft_parameters()) {
    fft_parameters_ = new ::sp::ste::fft_parameters(*from.fft_parameters_);
  } else {
    fft_parameters_ = NULL;
  }
  if (from.has_other_parameters()) {
    other_parameters_ = new ::sp::ste::other_parameters(*from.other_parameters_);
  } else {
    other_parameters_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sp.ste.set_parameters)
}

void set_parameters::SharedCtor() {
  ::memset(&state_parameters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&other_parameters_) -
      reinterpret_cast<char*>(&state_parameters_)) + sizeof(other_parameters_));
  _cached_size_ = 0;
}

set_parameters::~set_parameters() {
  // @@protoc_insertion_point(destructor:sp.ste.set_parameters)
  SharedDtor();
}

void set_parameters::SharedDtor() {
  if (this != internal_default_instance()) delete state_parameters_;
  if (this != internal_default_instance()) delete tx_parameters_;
  if (this != internal_default_instance()) delete fft_parameters_;
  if (this != internal_default_instance()) delete other_parameters_;
}

void set_parameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_parameters::descriptor() {
  ::protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sp_5fste_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const set_parameters& set_parameters::default_instance() {
  ::protobuf_sp_5fste_2eproto::InitDefaultsset_parameters();
  return *internal_default_instance();
}

set_parameters* set_parameters::New(::google::protobuf::Arena* arena) const {
  set_parameters* n = new set_parameters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void set_parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:sp.ste.set_parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_parameters_ != NULL) {
    delete state_parameters_;
  }
  state_parameters_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_parameters_ != NULL) {
    delete tx_parameters_;
  }
  tx_parameters_ = NULL;
  if (GetArenaNoVirtual() == NULL && fft_parameters_ != NULL) {
    delete fft_parameters_;
  }
  fft_parameters_ = NULL;
  if (GetArenaNoVirtual() == NULL && other_parameters_ != NULL) {
    delete other_parameters_;
  }
  other_parameters_ = NULL;
  _internal_metadata_.Clear();
}

bool set_parameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sp.ste.set_parameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sp.ste.state_parameters state_parameters = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sp.ste.tx_parameters tx_parameters = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sp.ste.fft_parameters fft_parameters = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fft_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sp.ste.other_parameters other_parameters = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_other_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sp.ste.set_parameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sp.ste.set_parameters)
  return false;
#undef DO_
}

void set_parameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sp.ste.set_parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sp.ste.state_parameters state_parameters = 1;
  if (this->has_state_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_parameters_, output);
  }

  // .sp.ste.tx_parameters tx_parameters = 2;
  if (this->has_tx_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tx_parameters_, output);
  }

  // .sp.ste.fft_parameters fft_parameters = 3;
  if (this->has_fft_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->fft_parameters_, output);
  }

  // .sp.ste.other_parameters other_parameters = 4;
  if (this->has_other_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->other_parameters_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sp.ste.set_parameters)
}

::google::protobuf::uint8* set_parameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sp.ste.set_parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sp.ste.state_parameters state_parameters = 1;
  if (this->has_state_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_parameters_, deterministic, target);
  }

  // .sp.ste.tx_parameters tx_parameters = 2;
  if (this->has_tx_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->tx_parameters_, deterministic, target);
  }

  // .sp.ste.fft_parameters fft_parameters = 3;
  if (this->has_fft_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->fft_parameters_, deterministic, target);
  }

  // .sp.ste.other_parameters other_parameters = 4;
  if (this->has_other_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->other_parameters_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sp.ste.set_parameters)
  return target;
}

size_t set_parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sp.ste.set_parameters)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sp.ste.state_parameters state_parameters = 1;
  if (this->has_state_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_parameters_);
  }

  // .sp.ste.tx_parameters tx_parameters = 2;
  if (this->has_tx_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_parameters_);
  }

  // .sp.ste.fft_parameters fft_parameters = 3;
  if (this->has_fft_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->fft_parameters_);
  }

  // .sp.ste.other_parameters other_parameters = 4;
  if (this->has_other_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->other_parameters_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_parameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sp.ste.set_parameters)
  GOOGLE_DCHECK_NE(&from, this);
  const set_parameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const set_parameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sp.ste.set_parameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sp.ste.set_parameters)
    MergeFrom(*source);
  }
}

void set_parameters::MergeFrom(const set_parameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sp.ste.set_parameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state_parameters()) {
    mutable_state_parameters()->::sp::ste::state_parameters::MergeFrom(from.state_parameters());
  }
  if (from.has_tx_parameters()) {
    mutable_tx_parameters()->::sp::ste::tx_parameters::MergeFrom(from.tx_parameters());
  }
  if (from.has_fft_parameters()) {
    mutable_fft_parameters()->::sp::ste::fft_parameters::MergeFrom(from.fft_parameters());
  }
  if (from.has_other_parameters()) {
    mutable_other_parameters()->::sp::ste::other_parameters::MergeFrom(from.other_parameters());
  }
}

void set_parameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sp.ste.set_parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_parameters::CopyFrom(const set_parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sp.ste.set_parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_parameters::IsInitialized() const {
  return true;
}

void set_parameters::Swap(set_parameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void set_parameters::InternalSwap(set_parameters* other) {
  using std::swap;
  swap(state_parameters_, other->state_parameters_);
  swap(tx_parameters_, other->tx_parameters_);
  swap(fft_parameters_, other->fft_parameters_);
  swap(other_parameters_, other->other_parameters_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata set_parameters::GetMetadata() const {
  protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sp_5fste_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void parameter_values::InitAsDefaultInstance() {
  ::sp::ste::_parameter_values_default_instance_._instance.get_mutable()->state_parameters_ = const_cast< ::sp::ste::state_parameters*>(
      ::sp::ste::state_parameters::internal_default_instance());
  ::sp::ste::_parameter_values_default_instance_._instance.get_mutable()->tx_parameters_ = const_cast< ::sp::ste::tx_parameters*>(
      ::sp::ste::tx_parameters::internal_default_instance());
  ::sp::ste::_parameter_values_default_instance_._instance.get_mutable()->fft_parameters_ = const_cast< ::sp::ste::fft_parameters*>(
      ::sp::ste::fft_parameters::internal_default_instance());
  ::sp::ste::_parameter_values_default_instance_._instance.get_mutable()->other_parameters_ = const_cast< ::sp::ste::other_parameters*>(
      ::sp::ste::other_parameters::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int parameter_values::kStateParametersFieldNumber;
const int parameter_values::kTxParametersFieldNumber;
const int parameter_values::kFftParametersFieldNumber;
const int parameter_values::kOtherParametersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

parameter_values::parameter_values()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sp_5fste_2eproto::InitDefaultsparameter_values();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sp.ste.parameter_values)
}
parameter_values::parameter_values(const parameter_values& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state_parameters()) {
    state_parameters_ = new ::sp::ste::state_parameters(*from.state_parameters_);
  } else {
    state_parameters_ = NULL;
  }
  if (from.has_tx_parameters()) {
    tx_parameters_ = new ::sp::ste::tx_parameters(*from.tx_parameters_);
  } else {
    tx_parameters_ = NULL;
  }
  if (from.has_fft_parameters()) {
    fft_parameters_ = new ::sp::ste::fft_parameters(*from.fft_parameters_);
  } else {
    fft_parameters_ = NULL;
  }
  if (from.has_other_parameters()) {
    other_parameters_ = new ::sp::ste::other_parameters(*from.other_parameters_);
  } else {
    other_parameters_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sp.ste.parameter_values)
}

void parameter_values::SharedCtor() {
  ::memset(&state_parameters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&other_parameters_) -
      reinterpret_cast<char*>(&state_parameters_)) + sizeof(other_parameters_));
  _cached_size_ = 0;
}

parameter_values::~parameter_values() {
  // @@protoc_insertion_point(destructor:sp.ste.parameter_values)
  SharedDtor();
}

void parameter_values::SharedDtor() {
  if (this != internal_default_instance()) delete state_parameters_;
  if (this != internal_default_instance()) delete tx_parameters_;
  if (this != internal_default_instance()) delete fft_parameters_;
  if (this != internal_default_instance()) delete other_parameters_;
}

void parameter_values::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* parameter_values::descriptor() {
  ::protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sp_5fste_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const parameter_values& parameter_values::default_instance() {
  ::protobuf_sp_5fste_2eproto::InitDefaultsparameter_values();
  return *internal_default_instance();
}

parameter_values* parameter_values::New(::google::protobuf::Arena* arena) const {
  parameter_values* n = new parameter_values;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void parameter_values::Clear() {
// @@protoc_insertion_point(message_clear_start:sp.ste.parameter_values)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_parameters_ != NULL) {
    delete state_parameters_;
  }
  state_parameters_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_parameters_ != NULL) {
    delete tx_parameters_;
  }
  tx_parameters_ = NULL;
  if (GetArenaNoVirtual() == NULL && fft_parameters_ != NULL) {
    delete fft_parameters_;
  }
  fft_parameters_ = NULL;
  if (GetArenaNoVirtual() == NULL && other_parameters_ != NULL) {
    delete other_parameters_;
  }
  other_parameters_ = NULL;
  _internal_metadata_.Clear();
}

bool parameter_values::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sp.ste.parameter_values)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sp.ste.state_parameters state_parameters = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sp.ste.tx_parameters tx_parameters = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sp.ste.fft_parameters fft_parameters = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fft_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sp.ste.other_parameters other_parameters = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_other_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sp.ste.parameter_values)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sp.ste.parameter_values)
  return false;
#undef DO_
}

void parameter_values::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sp.ste.parameter_values)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sp.ste.state_parameters state_parameters = 1;
  if (this->has_state_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_parameters_, output);
  }

  // .sp.ste.tx_parameters tx_parameters = 2;
  if (this->has_tx_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tx_parameters_, output);
  }

  // .sp.ste.fft_parameters fft_parameters = 3;
  if (this->has_fft_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->fft_parameters_, output);
  }

  // .sp.ste.other_parameters other_parameters = 4;
  if (this->has_other_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->other_parameters_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sp.ste.parameter_values)
}

::google::protobuf::uint8* parameter_values::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sp.ste.parameter_values)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sp.ste.state_parameters state_parameters = 1;
  if (this->has_state_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_parameters_, deterministic, target);
  }

  // .sp.ste.tx_parameters tx_parameters = 2;
  if (this->has_tx_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->tx_parameters_, deterministic, target);
  }

  // .sp.ste.fft_parameters fft_parameters = 3;
  if (this->has_fft_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->fft_parameters_, deterministic, target);
  }

  // .sp.ste.other_parameters other_parameters = 4;
  if (this->has_other_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->other_parameters_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sp.ste.parameter_values)
  return target;
}

size_t parameter_values::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sp.ste.parameter_values)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sp.ste.state_parameters state_parameters = 1;
  if (this->has_state_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_parameters_);
  }

  // .sp.ste.tx_parameters tx_parameters = 2;
  if (this->has_tx_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_parameters_);
  }

  // .sp.ste.fft_parameters fft_parameters = 3;
  if (this->has_fft_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->fft_parameters_);
  }

  // .sp.ste.other_parameters other_parameters = 4;
  if (this->has_other_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->other_parameters_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void parameter_values::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sp.ste.parameter_values)
  GOOGLE_DCHECK_NE(&from, this);
  const parameter_values* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const parameter_values>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sp.ste.parameter_values)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sp.ste.parameter_values)
    MergeFrom(*source);
  }
}

void parameter_values::MergeFrom(const parameter_values& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sp.ste.parameter_values)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state_parameters()) {
    mutable_state_parameters()->::sp::ste::state_parameters::MergeFrom(from.state_parameters());
  }
  if (from.has_tx_parameters()) {
    mutable_tx_parameters()->::sp::ste::tx_parameters::MergeFrom(from.tx_parameters());
  }
  if (from.has_fft_parameters()) {
    mutable_fft_parameters()->::sp::ste::fft_parameters::MergeFrom(from.fft_parameters());
  }
  if (from.has_other_parameters()) {
    mutable_other_parameters()->::sp::ste::other_parameters::MergeFrom(from.other_parameters());
  }
}

void parameter_values::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sp.ste.parameter_values)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void parameter_values::CopyFrom(const parameter_values& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sp.ste.parameter_values)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool parameter_values::IsInitialized() const {
  return true;
}

void parameter_values::Swap(parameter_values* other) {
  if (other == this) return;
  InternalSwap(other);
}
void parameter_values::InternalSwap(parameter_values* other) {
  using std::swap;
  swap(state_parameters_, other->state_parameters_);
  swap(tx_parameters_, other->tx_parameters_);
  swap(fft_parameters_, other->fft_parameters_);
  swap(other_parameters_, other->other_parameters_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata parameter_values::GetMetadata() const {
  protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sp_5fste_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void state_parameters::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int state_parameters::kSaveIqFieldNumber;
const int state_parameters::kParameterEstimateEnableFieldNumber;
const int state_parameters::kAwgnEnableFieldNumber;
const int state_parameters::kNotchEnableFieldNumber;
const int state_parameters::kFftAEnableFieldNumber;
const int state_parameters::kFftBEnableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

state_parameters::state_parameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sp_5fste_2eproto::InitDefaultsstate_parameters();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sp.ste.state_parameters)
}
state_parameters::state_parameters(const state_parameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&save_iq_, &from.save_iq_,
    static_cast<size_t>(reinterpret_cast<char*>(&fft_b_enable_) -
    reinterpret_cast<char*>(&save_iq_)) + sizeof(fft_b_enable_));
  // @@protoc_insertion_point(copy_constructor:sp.ste.state_parameters)
}

void state_parameters::SharedCtor() {
  ::memset(&save_iq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fft_b_enable_) -
      reinterpret_cast<char*>(&save_iq_)) + sizeof(fft_b_enable_));
  _cached_size_ = 0;
}

state_parameters::~state_parameters() {
  // @@protoc_insertion_point(destructor:sp.ste.state_parameters)
  SharedDtor();
}

void state_parameters::SharedDtor() {
}

void state_parameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* state_parameters::descriptor() {
  ::protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sp_5fste_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const state_parameters& state_parameters::default_instance() {
  ::protobuf_sp_5fste_2eproto::InitDefaultsstate_parameters();
  return *internal_default_instance();
}

state_parameters* state_parameters::New(::google::protobuf::Arena* arena) const {
  state_parameters* n = new state_parameters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void state_parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:sp.ste.state_parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&save_iq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fft_b_enable_) -
      reinterpret_cast<char*>(&save_iq_)) + sizeof(fft_b_enable_));
  _internal_metadata_.Clear();
}

bool state_parameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sp.ste.state_parameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool save_iq = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &save_iq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sp.ste.state parameter_estimate_enable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_parameter_estimate_enable(static_cast< ::sp::ste::state >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sp.ste.state awgn_enable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_awgn_enable(static_cast< ::sp::ste::state >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sp.ste.state notch_enable = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_notch_enable(static_cast< ::sp::ste::state >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sp.ste.state fft_a_enable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_fft_a_enable(static_cast< ::sp::ste::state >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sp.ste.state fft_b_enable = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_fft_b_enable(static_cast< ::sp::ste::state >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sp.ste.state_parameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sp.ste.state_parameters)
  return false;
#undef DO_
}

void state_parameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sp.ste.state_parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool save_iq = 1;
  if (this->save_iq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->save_iq(), output);
  }

  // .sp.ste.state parameter_estimate_enable = 2;
  if (this->parameter_estimate_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->parameter_estimate_enable(), output);
  }

  // .sp.ste.state awgn_enable = 3;
  if (this->awgn_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->awgn_enable(), output);
  }

  // .sp.ste.state notch_enable = 4;
  if (this->notch_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->notch_enable(), output);
  }

  // .sp.ste.state fft_a_enable = 5;
  if (this->fft_a_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->fft_a_enable(), output);
  }

  // .sp.ste.state fft_b_enable = 6;
  if (this->fft_b_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->fft_b_enable(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sp.ste.state_parameters)
}

::google::protobuf::uint8* state_parameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sp.ste.state_parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool save_iq = 1;
  if (this->save_iq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->save_iq(), target);
  }

  // .sp.ste.state parameter_estimate_enable = 2;
  if (this->parameter_estimate_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->parameter_estimate_enable(), target);
  }

  // .sp.ste.state awgn_enable = 3;
  if (this->awgn_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->awgn_enable(), target);
  }

  // .sp.ste.state notch_enable = 4;
  if (this->notch_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->notch_enable(), target);
  }

  // .sp.ste.state fft_a_enable = 5;
  if (this->fft_a_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->fft_a_enable(), target);
  }

  // .sp.ste.state fft_b_enable = 6;
  if (this->fft_b_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->fft_b_enable(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sp.ste.state_parameters)
  return target;
}

size_t state_parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sp.ste.state_parameters)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool save_iq = 1;
  if (this->save_iq() != 0) {
    total_size += 1 + 1;
  }

  // .sp.ste.state parameter_estimate_enable = 2;
  if (this->parameter_estimate_enable() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->parameter_estimate_enable());
  }

  // .sp.ste.state awgn_enable = 3;
  if (this->awgn_enable() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->awgn_enable());
  }

  // .sp.ste.state notch_enable = 4;
  if (this->notch_enable() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->notch_enable());
  }

  // .sp.ste.state fft_a_enable = 5;
  if (this->fft_a_enable() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fft_a_enable());
  }

  // .sp.ste.state fft_b_enable = 6;
  if (this->fft_b_enable() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fft_b_enable());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void state_parameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sp.ste.state_parameters)
  GOOGLE_DCHECK_NE(&from, this);
  const state_parameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const state_parameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sp.ste.state_parameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sp.ste.state_parameters)
    MergeFrom(*source);
  }
}

void state_parameters::MergeFrom(const state_parameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sp.ste.state_parameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.save_iq() != 0) {
    set_save_iq(from.save_iq());
  }
  if (from.parameter_estimate_enable() != 0) {
    set_parameter_estimate_enable(from.parameter_estimate_enable());
  }
  if (from.awgn_enable() != 0) {
    set_awgn_enable(from.awgn_enable());
  }
  if (from.notch_enable() != 0) {
    set_notch_enable(from.notch_enable());
  }
  if (from.fft_a_enable() != 0) {
    set_fft_a_enable(from.fft_a_enable());
  }
  if (from.fft_b_enable() != 0) {
    set_fft_b_enable(from.fft_b_enable());
  }
}

void state_parameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sp.ste.state_parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void state_parameters::CopyFrom(const state_parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sp.ste.state_parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool state_parameters::IsInitialized() const {
  return true;
}

void state_parameters::Swap(state_parameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void state_parameters::InternalSwap(state_parameters* other) {
  using std::swap;
  swap(save_iq_, other->save_iq_);
  swap(parameter_estimate_enable_, other->parameter_estimate_enable_);
  swap(awgn_enable_, other->awgn_enable_);
  swap(notch_enable_, other->notch_enable_);
  swap(fft_a_enable_, other->fft_a_enable_);
  swap(fft_b_enable_, other->fft_b_enable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata state_parameters::GetMetadata() const {
  protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sp_5fste_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void tx_parameters::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tx_parameters::kNumTxSamplesTotalFieldNumber;
const int tx_parameters::kTxFreq1HzFieldNumber;
const int tx_parameters::kTxFreq2HzFieldNumber;
const int tx_parameters::kTxPhase1RotFieldNumber;
const int tx_parameters::kTxPhase2RotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tx_parameters::tx_parameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sp_5fste_2eproto::InitDefaultstx_parameters();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sp.ste.tx_parameters)
}
tx_parameters::tx_parameters(const tx_parameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_tx_samples_total_, &from.num_tx_samples_total_,
    static_cast<size_t>(reinterpret_cast<char*>(&tx_phase2_rot_) -
    reinterpret_cast<char*>(&num_tx_samples_total_)) + sizeof(tx_phase2_rot_));
  // @@protoc_insertion_point(copy_constructor:sp.ste.tx_parameters)
}

void tx_parameters::SharedCtor() {
  ::memset(&num_tx_samples_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tx_phase2_rot_) -
      reinterpret_cast<char*>(&num_tx_samples_total_)) + sizeof(tx_phase2_rot_));
  _cached_size_ = 0;
}

tx_parameters::~tx_parameters() {
  // @@protoc_insertion_point(destructor:sp.ste.tx_parameters)
  SharedDtor();
}

void tx_parameters::SharedDtor() {
}

void tx_parameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tx_parameters::descriptor() {
  ::protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sp_5fste_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const tx_parameters& tx_parameters::default_instance() {
  ::protobuf_sp_5fste_2eproto::InitDefaultstx_parameters();
  return *internal_default_instance();
}

tx_parameters* tx_parameters::New(::google::protobuf::Arena* arena) const {
  tx_parameters* n = new tx_parameters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tx_parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:sp.ste.tx_parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_tx_samples_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tx_phase2_rot_) -
      reinterpret_cast<char*>(&num_tx_samples_total_)) + sizeof(tx_phase2_rot_));
  _internal_metadata_.Clear();
}

bool tx_parameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sp.ste.tx_parameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double num_tx_samples_total = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &num_tx_samples_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double tx_freq1_Hz = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tx_freq1_hz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double tx_freq2_Hz = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tx_freq2_hz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double tx_phase1_rot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tx_phase1_rot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double tx_phase2_rot = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tx_phase2_rot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sp.ste.tx_parameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sp.ste.tx_parameters)
  return false;
#undef DO_
}

void tx_parameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sp.ste.tx_parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double num_tx_samples_total = 1;
  if (this->num_tx_samples_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->num_tx_samples_total(), output);
  }

  // double tx_freq1_Hz = 2;
  if (this->tx_freq1_hz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->tx_freq1_hz(), output);
  }

  // double tx_freq2_Hz = 3;
  if (this->tx_freq2_hz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->tx_freq2_hz(), output);
  }

  // double tx_phase1_rot = 4;
  if (this->tx_phase1_rot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->tx_phase1_rot(), output);
  }

  // double tx_phase2_rot = 5;
  if (this->tx_phase2_rot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->tx_phase2_rot(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sp.ste.tx_parameters)
}

::google::protobuf::uint8* tx_parameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sp.ste.tx_parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double num_tx_samples_total = 1;
  if (this->num_tx_samples_total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->num_tx_samples_total(), target);
  }

  // double tx_freq1_Hz = 2;
  if (this->tx_freq1_hz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->tx_freq1_hz(), target);
  }

  // double tx_freq2_Hz = 3;
  if (this->tx_freq2_hz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->tx_freq2_hz(), target);
  }

  // double tx_phase1_rot = 4;
  if (this->tx_phase1_rot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->tx_phase1_rot(), target);
  }

  // double tx_phase2_rot = 5;
  if (this->tx_phase2_rot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->tx_phase2_rot(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sp.ste.tx_parameters)
  return target;
}

size_t tx_parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sp.ste.tx_parameters)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double num_tx_samples_total = 1;
  if (this->num_tx_samples_total() != 0) {
    total_size += 1 + 8;
  }

  // double tx_freq1_Hz = 2;
  if (this->tx_freq1_hz() != 0) {
    total_size += 1 + 8;
  }

  // double tx_freq2_Hz = 3;
  if (this->tx_freq2_hz() != 0) {
    total_size += 1 + 8;
  }

  // double tx_phase1_rot = 4;
  if (this->tx_phase1_rot() != 0) {
    total_size += 1 + 8;
  }

  // double tx_phase2_rot = 5;
  if (this->tx_phase2_rot() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tx_parameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sp.ste.tx_parameters)
  GOOGLE_DCHECK_NE(&from, this);
  const tx_parameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tx_parameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sp.ste.tx_parameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sp.ste.tx_parameters)
    MergeFrom(*source);
  }
}

void tx_parameters::MergeFrom(const tx_parameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sp.ste.tx_parameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_tx_samples_total() != 0) {
    set_num_tx_samples_total(from.num_tx_samples_total());
  }
  if (from.tx_freq1_hz() != 0) {
    set_tx_freq1_hz(from.tx_freq1_hz());
  }
  if (from.tx_freq2_hz() != 0) {
    set_tx_freq2_hz(from.tx_freq2_hz());
  }
  if (from.tx_phase1_rot() != 0) {
    set_tx_phase1_rot(from.tx_phase1_rot());
  }
  if (from.tx_phase2_rot() != 0) {
    set_tx_phase2_rot(from.tx_phase2_rot());
  }
}

void tx_parameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sp.ste.tx_parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tx_parameters::CopyFrom(const tx_parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sp.ste.tx_parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tx_parameters::IsInitialized() const {
  return true;
}

void tx_parameters::Swap(tx_parameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tx_parameters::InternalSwap(tx_parameters* other) {
  using std::swap;
  swap(num_tx_samples_total_, other->num_tx_samples_total_);
  swap(tx_freq1_hz_, other->tx_freq1_hz_);
  swap(tx_freq2_hz_, other->tx_freq2_hz_);
  swap(tx_phase1_rot_, other->tx_phase1_rot_);
  swap(tx_phase2_rot_, other->tx_phase2_rot_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tx_parameters::GetMetadata() const {
  protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sp_5fste_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void fft_parameters::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int fft_parameters::kFftLengthAFieldNumber;
const int fft_parameters::kFftBatchesAFieldNumber;
const int fft_parameters::kFftLengthBFieldNumber;
const int fft_parameters::kFftBatchesBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

fft_parameters::fft_parameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sp_5fste_2eproto::InitDefaultsfft_parameters();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sp.ste.fft_parameters)
}
fft_parameters::fft_parameters(const fft_parameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fft_length_a_, &from.fft_length_a_,
    static_cast<size_t>(reinterpret_cast<char*>(&fft_batches_b_) -
    reinterpret_cast<char*>(&fft_length_a_)) + sizeof(fft_batches_b_));
  // @@protoc_insertion_point(copy_constructor:sp.ste.fft_parameters)
}

void fft_parameters::SharedCtor() {
  ::memset(&fft_length_a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fft_batches_b_) -
      reinterpret_cast<char*>(&fft_length_a_)) + sizeof(fft_batches_b_));
  _cached_size_ = 0;
}

fft_parameters::~fft_parameters() {
  // @@protoc_insertion_point(destructor:sp.ste.fft_parameters)
  SharedDtor();
}

void fft_parameters::SharedDtor() {
}

void fft_parameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fft_parameters::descriptor() {
  ::protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sp_5fste_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const fft_parameters& fft_parameters::default_instance() {
  ::protobuf_sp_5fste_2eproto::InitDefaultsfft_parameters();
  return *internal_default_instance();
}

fft_parameters* fft_parameters::New(::google::protobuf::Arena* arena) const {
  fft_parameters* n = new fft_parameters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void fft_parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:sp.ste.fft_parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fft_length_a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fft_batches_b_) -
      reinterpret_cast<char*>(&fft_length_a_)) + sizeof(fft_batches_b_));
  _internal_metadata_.Clear();
}

bool fft_parameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sp.ste.fft_parameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 fft_length_a = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fft_length_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fft_batches_a = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fft_batches_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fft_length_b = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fft_length_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fft_batches_b = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fft_batches_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sp.ste.fft_parameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sp.ste.fft_parameters)
  return false;
#undef DO_
}

void fft_parameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sp.ste.fft_parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fft_length_a = 1;
  if (this->fft_length_a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fft_length_a(), output);
  }

  // uint32 fft_batches_a = 2;
  if (this->fft_batches_a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fft_batches_a(), output);
  }

  // uint32 fft_length_b = 3;
  if (this->fft_length_b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fft_length_b(), output);
  }

  // uint32 fft_batches_b = 4;
  if (this->fft_batches_b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fft_batches_b(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sp.ste.fft_parameters)
}

::google::protobuf::uint8* fft_parameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sp.ste.fft_parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fft_length_a = 1;
  if (this->fft_length_a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fft_length_a(), target);
  }

  // uint32 fft_batches_a = 2;
  if (this->fft_batches_a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fft_batches_a(), target);
  }

  // uint32 fft_length_b = 3;
  if (this->fft_length_b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fft_length_b(), target);
  }

  // uint32 fft_batches_b = 4;
  if (this->fft_batches_b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fft_batches_b(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sp.ste.fft_parameters)
  return target;
}

size_t fft_parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sp.ste.fft_parameters)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 fft_length_a = 1;
  if (this->fft_length_a() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fft_length_a());
  }

  // uint32 fft_batches_a = 2;
  if (this->fft_batches_a() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fft_batches_a());
  }

  // uint32 fft_length_b = 3;
  if (this->fft_length_b() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fft_length_b());
  }

  // uint32 fft_batches_b = 4;
  if (this->fft_batches_b() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fft_batches_b());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fft_parameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sp.ste.fft_parameters)
  GOOGLE_DCHECK_NE(&from, this);
  const fft_parameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const fft_parameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sp.ste.fft_parameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sp.ste.fft_parameters)
    MergeFrom(*source);
  }
}

void fft_parameters::MergeFrom(const fft_parameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sp.ste.fft_parameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fft_length_a() != 0) {
    set_fft_length_a(from.fft_length_a());
  }
  if (from.fft_batches_a() != 0) {
    set_fft_batches_a(from.fft_batches_a());
  }
  if (from.fft_length_b() != 0) {
    set_fft_length_b(from.fft_length_b());
  }
  if (from.fft_batches_b() != 0) {
    set_fft_batches_b(from.fft_batches_b());
  }
}

void fft_parameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sp.ste.fft_parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fft_parameters::CopyFrom(const fft_parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sp.ste.fft_parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fft_parameters::IsInitialized() const {
  return true;
}

void fft_parameters::Swap(fft_parameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void fft_parameters::InternalSwap(fft_parameters* other) {
  using std::swap;
  swap(fft_length_a_, other->fft_length_a_);
  swap(fft_batches_a_, other->fft_batches_a_);
  swap(fft_length_b_, other->fft_length_b_);
  swap(fft_batches_b_, other->fft_batches_b_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata fft_parameters::GetMetadata() const {
  protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sp_5fste_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void other_parameters::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int other_parameters::kNumRxSamplesFieldNumber;
const int other_parameters::kRxRotFreqHzFieldNumber;
const int other_parameters::kDecimationFieldNumber;
const int other_parameters::kGain1FieldNumber;
const int other_parameters::kGain2FieldNumber;
const int other_parameters::kNextTxStartTimeFieldNumber;
const int other_parameters::kNextRxStartTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

other_parameters::other_parameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sp_5fste_2eproto::InitDefaultsother_parameters();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sp.ste.other_parameters)
}
other_parameters::other_parameters(const other_parameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_rx_samples_, &from.num_rx_samples_,
    static_cast<size_t>(reinterpret_cast<char*>(&gain2_) -
    reinterpret_cast<char*>(&num_rx_samples_)) + sizeof(gain2_));
  // @@protoc_insertion_point(copy_constructor:sp.ste.other_parameters)
}

void other_parameters::SharedCtor() {
  ::memset(&num_rx_samples_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gain2_) -
      reinterpret_cast<char*>(&num_rx_samples_)) + sizeof(gain2_));
  _cached_size_ = 0;
}

other_parameters::~other_parameters() {
  // @@protoc_insertion_point(destructor:sp.ste.other_parameters)
  SharedDtor();
}

void other_parameters::SharedDtor() {
}

void other_parameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* other_parameters::descriptor() {
  ::protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sp_5fste_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const other_parameters& other_parameters::default_instance() {
  ::protobuf_sp_5fste_2eproto::InitDefaultsother_parameters();
  return *internal_default_instance();
}

other_parameters* other_parameters::New(::google::protobuf::Arena* arena) const {
  other_parameters* n = new other_parameters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void other_parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:sp.ste.other_parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_rx_samples_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gain2_) -
      reinterpret_cast<char*>(&num_rx_samples_)) + sizeof(gain2_));
  _internal_metadata_.Clear();
}

bool other_parameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sp.ste.other_parameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double num_rx_samples = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &num_rx_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rx_rot_freq_Hz = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rx_rot_freq_hz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 decimation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &decimation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gain1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gain1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gain2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gain2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double nextTxStartTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &nexttxstarttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double nextRxStartTime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &nextrxstarttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sp.ste.other_parameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sp.ste.other_parameters)
  return false;
#undef DO_
}

void other_parameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sp.ste.other_parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double num_rx_samples = 1;
  if (this->num_rx_samples() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->num_rx_samples(), output);
  }

  // double rx_rot_freq_Hz = 2;
  if (this->rx_rot_freq_hz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rx_rot_freq_hz(), output);
  }

  // uint32 decimation = 3;
  if (this->decimation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->decimation(), output);
  }

  // uint32 gain1 = 4;
  if (this->gain1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gain1(), output);
  }

  // uint32 gain2 = 5;
  if (this->gain2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gain2(), output);
  }

  // double nextTxStartTime = 6;
  if (this->nexttxstarttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->nexttxstarttime(), output);
  }

  // double nextRxStartTime = 7;
  if (this->nextrxstarttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->nextrxstarttime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sp.ste.other_parameters)
}

::google::protobuf::uint8* other_parameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sp.ste.other_parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double num_rx_samples = 1;
  if (this->num_rx_samples() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->num_rx_samples(), target);
  }

  // double rx_rot_freq_Hz = 2;
  if (this->rx_rot_freq_hz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rx_rot_freq_hz(), target);
  }

  // uint32 decimation = 3;
  if (this->decimation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->decimation(), target);
  }

  // uint32 gain1 = 4;
  if (this->gain1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gain1(), target);
  }

  // uint32 gain2 = 5;
  if (this->gain2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gain2(), target);
  }

  // double nextTxStartTime = 6;
  if (this->nexttxstarttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->nexttxstarttime(), target);
  }

  // double nextRxStartTime = 7;
  if (this->nextrxstarttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->nextrxstarttime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sp.ste.other_parameters)
  return target;
}

size_t other_parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sp.ste.other_parameters)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double num_rx_samples = 1;
  if (this->num_rx_samples() != 0) {
    total_size += 1 + 8;
  }

  // double rx_rot_freq_Hz = 2;
  if (this->rx_rot_freq_hz() != 0) {
    total_size += 1 + 8;
  }

  // uint32 decimation = 3;
  if (this->decimation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->decimation());
  }

  // uint32 gain1 = 4;
  if (this->gain1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gain1());
  }

  // double nextTxStartTime = 6;
  if (this->nexttxstarttime() != 0) {
    total_size += 1 + 8;
  }

  // double nextRxStartTime = 7;
  if (this->nextrxstarttime() != 0) {
    total_size += 1 + 8;
  }

  // uint32 gain2 = 5;
  if (this->gain2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gain2());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void other_parameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sp.ste.other_parameters)
  GOOGLE_DCHECK_NE(&from, this);
  const other_parameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const other_parameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sp.ste.other_parameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sp.ste.other_parameters)
    MergeFrom(*source);
  }
}

void other_parameters::MergeFrom(const other_parameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sp.ste.other_parameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_rx_samples() != 0) {
    set_num_rx_samples(from.num_rx_samples());
  }
  if (from.rx_rot_freq_hz() != 0) {
    set_rx_rot_freq_hz(from.rx_rot_freq_hz());
  }
  if (from.decimation() != 0) {
    set_decimation(from.decimation());
  }
  if (from.gain1() != 0) {
    set_gain1(from.gain1());
  }
  if (from.nexttxstarttime() != 0) {
    set_nexttxstarttime(from.nexttxstarttime());
  }
  if (from.nextrxstarttime() != 0) {
    set_nextrxstarttime(from.nextrxstarttime());
  }
  if (from.gain2() != 0) {
    set_gain2(from.gain2());
  }
}

void other_parameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sp.ste.other_parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void other_parameters::CopyFrom(const other_parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sp.ste.other_parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool other_parameters::IsInitialized() const {
  return true;
}

void other_parameters::Swap(other_parameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void other_parameters::InternalSwap(other_parameters* other) {
  using std::swap;
  swap(num_rx_samples_, other->num_rx_samples_);
  swap(rx_rot_freq_hz_, other->rx_rot_freq_hz_);
  swap(decimation_, other->decimation_);
  swap(gain1_, other->gain1_);
  swap(nexttxstarttime_, other->nexttxstarttime_);
  swap(nextrxstarttime_, other->nextrxstarttime_);
  swap(gain2_, other->gain2_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata other_parameters::GetMetadata() const {
  protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sp_5fste_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ste
}  // namespace sp

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sp_ste.proto

#include "sp_ste.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace sp {
namespace ste {
class set_parametersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<set_parameters>
      _instance;
} _set_parameters_default_instance_;
class parameter_valuesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<parameter_values>
      _instance;
} _parameter_values_default_instance_;
class TestBedRpcHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestBedRpcHeader>
      _instance;
} _TestBedRpcHeader_default_instance_;
class PayloadSteSingleMeasurementTxParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PayloadSteSingleMeasurementTxParams>
      _instance;
} _PayloadSteSingleMeasurementTxParams_default_instance_;
class PayloadSteSingleMeasurementRxParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PayloadSteSingleMeasurementRxParams>
      _instance;
} _PayloadSteSingleMeasurementRxParams_default_instance_;
class null_messageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<null_message>
      _instance;
} _null_message_default_instance_;
}  // namespace ste
}  // namespace sp
namespace protobuf_sp_5fste_2eproto {
void InitDefaultsset_parametersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_sp_5fste_2eproto::InitDefaultsTestBedRpcHeader();
  protobuf_sp_5fste_2eproto::InitDefaultsPayloadSteSingleMeasurementRxParams();
  protobuf_sp_5fste_2eproto::InitDefaultsPayloadSteSingleMeasurementTxParams();
  {
    void* ptr = &::sp::ste::_set_parameters_default_instance_;
    new (ptr) ::sp::ste::set_parameters();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sp::ste::set_parameters::InitAsDefaultInstance();
}

void InitDefaultsset_parameters() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsset_parametersImpl);
}

void InitDefaultsparameter_valuesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_sp_5fste_2eproto::InitDefaultsTestBedRpcHeader();
  protobuf_sp_5fste_2eproto::InitDefaultsPayloadSteSingleMeasurementRxParams();
  protobuf_sp_5fste_2eproto::InitDefaultsPayloadSteSingleMeasurementTxParams();
  {
    void* ptr = &::sp::ste::_parameter_values_default_instance_;
    new (ptr) ::sp::ste::parameter_values();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sp::ste::parameter_values::InitAsDefaultInstance();
}

void InitDefaultsparameter_values() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsparameter_valuesImpl);
}

void InitDefaultsTestBedRpcHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::sp::ste::_TestBedRpcHeader_default_instance_;
    new (ptr) ::sp::ste::TestBedRpcHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sp::ste::TestBedRpcHeader::InitAsDefaultInstance();
}

void InitDefaultsTestBedRpcHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTestBedRpcHeaderImpl);
}

void InitDefaultsPayloadSteSingleMeasurementTxParamsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::sp::ste::_PayloadSteSingleMeasurementTxParams_default_instance_;
    new (ptr) ::sp::ste::PayloadSteSingleMeasurementTxParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sp::ste::PayloadSteSingleMeasurementTxParams::InitAsDefaultInstance();
}

void InitDefaultsPayloadSteSingleMeasurementTxParams() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPayloadSteSingleMeasurementTxParamsImpl);
}

void InitDefaultsPayloadSteSingleMeasurementRxParamsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::sp::ste::_PayloadSteSingleMeasurementRxParams_default_instance_;
    new (ptr) ::sp::ste::PayloadSteSingleMeasurementRxParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sp::ste::PayloadSteSingleMeasurementRxParams::InitAsDefaultInstance();
}

void InitDefaultsPayloadSteSingleMeasurementRxParams() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPayloadSteSingleMeasurementRxParamsImpl);
}

void InitDefaultsnull_messageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::sp::ste::_null_message_default_instance_;
    new (ptr) ::sp::ste::null_message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sp::ste::null_message::InitAsDefaultInstance();
}

void InitDefaultsnull_message() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsnull_messageImpl);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::set_parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::set_parameters, hdr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::set_parameters, rx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::set_parameters, tx_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::parameter_values, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::parameter_values, hdr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::parameter_values, rx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::parameter_values, tx_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::TestBedRpcHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::TestBedRpcHeader, module_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::TestBedRpcHeader, core_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementTxParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementTxParams, tx_freq1_hz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementTxParams, tx_phase1_rot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementTxParams, tx_freq2_hz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementTxParams, tx_phase2_rot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementTxParams, gain1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementTxParams, gain2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementTxParams, gain3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementTxParams, awgn_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementTxParams, notch_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementTxParams, num_tx_samples_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementTxParams, num_tx_samples_per_batch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementTxParams, filebasename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementTxParams, filename_tx_samples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementTxParams, nexttxstarttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementTxParams, tx_idle_pattern_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementRxParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementRxParams, fft_length_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementRxParams, fft_length_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementRxParams, fft_batches_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementRxParams, fft_batches_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementRxParams, rx_rot_freq_hz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementRxParams, decimation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementRxParams, num_rx_samples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementRxParams, save_iq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementRxParams, fft_a_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementRxParams, fft_b_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementRxParams, parameter_estimate_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementRxParams, filebasename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementRxParams, filename_fft_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementRxParams, filename_fft_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementRxParams, filename_rx_samples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::PayloadSteSingleMeasurementRxParams, nextrxstarttime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sp::ste::null_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sp::ste::set_parameters)},
  { 8, -1, sizeof(::sp::ste::parameter_values)},
  { 16, -1, sizeof(::sp::ste::TestBedRpcHeader)},
  { 23, -1, sizeof(::sp::ste::PayloadSteSingleMeasurementTxParams)},
  { 43, -1, sizeof(::sp::ste::PayloadSteSingleMeasurementRxParams)},
  { 64, -1, sizeof(::sp::ste::null_message)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sp::ste::_set_parameters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sp::ste::_parameter_values_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sp::ste::_TestBedRpcHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sp::ste::_PayloadSteSingleMeasurementTxParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sp::ste::_PayloadSteSingleMeasurementRxParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sp::ste::_null_message_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sp_ste.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014sp_ste.proto\022\006sp.ste\"\251\001\n\016set_parameter"
      "s\022%\n\003hdr\030\001 \001(\0132\030.sp.ste.TestBedRpcHeader"
      "\0227\n\002rx\030\002 \001(\0132+.sp.ste.PayloadSteSingleMe"
      "asurementRxParams\0227\n\002tx\030\003 \001(\0132+.sp.ste.P"
      "ayloadSteSingleMeasurementTxParams\"\253\001\n\020p"
      "arameter_values\022%\n\003hdr\030\001 \001(\0132\030.sp.ste.Te"
      "stBedRpcHeader\0227\n\002rx\030\002 \001(\0132+.sp.ste.Payl"
      "oadSteSingleMeasurementRxParams\0227\n\002tx\030\003 "
      "\001(\0132+.sp.ste.PayloadSteSingleMeasurement"
      "TxParams\"0\n\020TestBedRpcHeader\022\016\n\006module\030\001"
      " \001(\t\022\014\n\004core\030\002 \001(\005\"\221\003\n#PayloadSteSingleM"
      "easurementTxParams\022\023\n\013tx_freq1_Hz\030\001 \001(\002\022"
      "\025\n\rtx_phase1_rot\030\002 \001(\002\022\023\n\013tx_freq2_Hz\030\003 "
      "\001(\002\022\025\n\rtx_phase2_rot\030\004 \001(\002\022\r\n\005gain1\030\005 \001("
      "\002\022\r\n\005gain2\030\006 \001(\002\022\r\n\005gain3\030\007 \001(\002\022\023\n\013awgn_"
      "enable\030\010 \001(\010\022\024\n\014notch_enable\030\t \001(\010\022\034\n\024nu"
      "m_tx_samples_total\030\n \001(\r\022 \n\030num_tx_sampl"
      "es_per_batch\030\013 \001(\r\022\024\n\014filebasename\030\014 \001(\t"
      "\022\033\n\023filename_tx_samples\030\r \001(\t\022\027\n\017nextTxS"
      "tartTime\030\016 \001(\004\022.\n\017tx_idle_pattern\030\017 \001(\0162"
      "\025.sp.ste.TxIdlePattern\"\237\003\n#PayloadSteSin"
      "gleMeasurementRxParams\022\024\n\014fft_length_a\030\001"
      " \001(\r\022\024\n\014fft_length_b\030\002 \001(\r\022\025\n\rfft_batche"
      "s_a\030\003 \001(\r\022\025\n\rfft_batches_b\030\004 \001(\r\022\026\n\016rx_r"
      "ot_freq_Hz\030\005 \001(\002\022\022\n\ndecimation\030\006 \001(\r\022\026\n\016"
      "num_rx_samples\030\007 \001(\r\022\017\n\007save_iq\030\010 \001(\010\022\024\n"
      "\014fft_a_enable\030\t \001(\010\022\024\n\014fft_b_enable\030\n \001("
      "\010\022!\n\031parameter_estimate_enable\030\013 \001(\010\022\024\n\014"
      "filebasename\030\014 \001(\t\022\026\n\016filename_fft_a\030\r \001"
      "(\t\022\026\n\016filename_fft_b\030\016 \001(\t\022\033\n\023filename_r"
      "x_samples\030\017 \001(\t\022\027\n\017nextRxStartTime\030\020 \001(\004"
      "\"\016\n\014null_message*[\n\rTxIdlePattern\022\030\n\024TX_"
      "IDLE_PATTERN_ZERO\020\000\022\030\n\024TX_IDLE_PATTERN_R"
      "AMP\020\001\022\026\n\022TX_IDLE_PATTERN_CW\020\0022\304\002\n\016sp_ste"
      "_control\022>\n\010loopback\022\026.sp.ste.set_parame"
      "ters\032\030.sp.ste.parameter_values\"\000\022H\n\024chec"
      "k_current_values\022\024.sp.ste.null_message\032\030"
      ".sp.ste.parameter_values\"\000\022S\n\035issue_new_"
      "values_and_read_old\022\026.sp.ste.set_paramet"
      "ers\032\030.sp.ste.parameter_values\"\000\022S\n\035issue"
      "_new_values_and_read_new\022\026.sp.ste.set_pa"
      "rameters\032\030.sp.ste.parameter_values\"\000B+\n\027"
      "io.grpc.examples.sp_steB\014sp_ste_protoH\001P"
      "\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1729);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sp_ste.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sp_5fste_2eproto
namespace sp {
namespace ste {
const ::google::protobuf::EnumDescriptor* TxIdlePattern_descriptor() {
  protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sp_5fste_2eproto::file_level_enum_descriptors[0];
}
bool TxIdlePattern_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void set_parameters::InitAsDefaultInstance() {
  ::sp::ste::_set_parameters_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::sp::ste::TestBedRpcHeader*>(
      ::sp::ste::TestBedRpcHeader::internal_default_instance());
  ::sp::ste::_set_parameters_default_instance_._instance.get_mutable()->rx_ = const_cast< ::sp::ste::PayloadSteSingleMeasurementRxParams*>(
      ::sp::ste::PayloadSteSingleMeasurementRxParams::internal_default_instance());
  ::sp::ste::_set_parameters_default_instance_._instance.get_mutable()->tx_ = const_cast< ::sp::ste::PayloadSteSingleMeasurementTxParams*>(
      ::sp::ste::PayloadSteSingleMeasurementTxParams::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int set_parameters::kHdrFieldNumber;
const int set_parameters::kRxFieldNumber;
const int set_parameters::kTxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

set_parameters::set_parameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sp_5fste_2eproto::InitDefaultsset_parameters();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sp.ste.set_parameters)
}
set_parameters::set_parameters(const set_parameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hdr()) {
    hdr_ = new ::sp::ste::TestBedRpcHeader(*from.hdr_);
  } else {
    hdr_ = NULL;
  }
  if (from.has_rx()) {
    rx_ = new ::sp::ste::PayloadSteSingleMeasurementRxParams(*from.rx_);
  } else {
    rx_ = NULL;
  }
  if (from.has_tx()) {
    tx_ = new ::sp::ste::PayloadSteSingleMeasurementTxParams(*from.tx_);
  } else {
    tx_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sp.ste.set_parameters)
}

void set_parameters::SharedCtor() {
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tx_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(tx_));
  _cached_size_ = 0;
}

set_parameters::~set_parameters() {
  // @@protoc_insertion_point(destructor:sp.ste.set_parameters)
  SharedDtor();
}

void set_parameters::SharedDtor() {
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete rx_;
  if (this != internal_default_instance()) delete tx_;
}

void set_parameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_parameters::descriptor() {
  ::protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sp_5fste_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const set_parameters& set_parameters::default_instance() {
  ::protobuf_sp_5fste_2eproto::InitDefaultsset_parameters();
  return *internal_default_instance();
}

set_parameters* set_parameters::New(::google::protobuf::Arena* arena) const {
  set_parameters* n = new set_parameters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void set_parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:sp.ste.set_parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && hdr_ != NULL) {
    delete hdr_;
  }
  hdr_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_ != NULL) {
    delete rx_;
  }
  rx_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_ != NULL) {
    delete tx_;
  }
  tx_ = NULL;
  _internal_metadata_.Clear();
}

bool set_parameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sp.ste.set_parameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sp.ste.TestBedRpcHeader hdr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sp.ste.PayloadSteSingleMeasurementRxParams rx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sp.ste.PayloadSteSingleMeasurementTxParams tx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sp.ste.set_parameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sp.ste.set_parameters)
  return false;
#undef DO_
}

void set_parameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sp.ste.set_parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sp.ste.TestBedRpcHeader hdr = 1;
  if (this->has_hdr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->hdr_, output);
  }

  // .sp.ste.PayloadSteSingleMeasurementRxParams rx = 2;
  if (this->has_rx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rx_, output);
  }

  // .sp.ste.PayloadSteSingleMeasurementTxParams tx = 3;
  if (this->has_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->tx_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sp.ste.set_parameters)
}

::google::protobuf::uint8* set_parameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sp.ste.set_parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sp.ste.TestBedRpcHeader hdr = 1;
  if (this->has_hdr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->hdr_, deterministic, target);
  }

  // .sp.ste.PayloadSteSingleMeasurementRxParams rx = 2;
  if (this->has_rx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->rx_, deterministic, target);
  }

  // .sp.ste.PayloadSteSingleMeasurementTxParams tx = 3;
  if (this->has_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->tx_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sp.ste.set_parameters)
  return target;
}

size_t set_parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sp.ste.set_parameters)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sp.ste.TestBedRpcHeader hdr = 1;
  if (this->has_hdr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->hdr_);
  }

  // .sp.ste.PayloadSteSingleMeasurementRxParams rx = 2;
  if (this->has_rx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_);
  }

  // .sp.ste.PayloadSteSingleMeasurementTxParams tx = 3;
  if (this->has_tx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_parameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sp.ste.set_parameters)
  GOOGLE_DCHECK_NE(&from, this);
  const set_parameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const set_parameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sp.ste.set_parameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sp.ste.set_parameters)
    MergeFrom(*source);
  }
}

void set_parameters::MergeFrom(const set_parameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sp.ste.set_parameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr()) {
    mutable_hdr()->::sp::ste::TestBedRpcHeader::MergeFrom(from.hdr());
  }
  if (from.has_rx()) {
    mutable_rx()->::sp::ste::PayloadSteSingleMeasurementRxParams::MergeFrom(from.rx());
  }
  if (from.has_tx()) {
    mutable_tx()->::sp::ste::PayloadSteSingleMeasurementTxParams::MergeFrom(from.tx());
  }
}

void set_parameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sp.ste.set_parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_parameters::CopyFrom(const set_parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sp.ste.set_parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_parameters::IsInitialized() const {
  return true;
}

void set_parameters::Swap(set_parameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void set_parameters::InternalSwap(set_parameters* other) {
  using std::swap;
  swap(hdr_, other->hdr_);
  swap(rx_, other->rx_);
  swap(tx_, other->tx_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata set_parameters::GetMetadata() const {
  protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sp_5fste_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void parameter_values::InitAsDefaultInstance() {
  ::sp::ste::_parameter_values_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::sp::ste::TestBedRpcHeader*>(
      ::sp::ste::TestBedRpcHeader::internal_default_instance());
  ::sp::ste::_parameter_values_default_instance_._instance.get_mutable()->rx_ = const_cast< ::sp::ste::PayloadSteSingleMeasurementRxParams*>(
      ::sp::ste::PayloadSteSingleMeasurementRxParams::internal_default_instance());
  ::sp::ste::_parameter_values_default_instance_._instance.get_mutable()->tx_ = const_cast< ::sp::ste::PayloadSteSingleMeasurementTxParams*>(
      ::sp::ste::PayloadSteSingleMeasurementTxParams::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int parameter_values::kHdrFieldNumber;
const int parameter_values::kRxFieldNumber;
const int parameter_values::kTxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

parameter_values::parameter_values()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sp_5fste_2eproto::InitDefaultsparameter_values();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sp.ste.parameter_values)
}
parameter_values::parameter_values(const parameter_values& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hdr()) {
    hdr_ = new ::sp::ste::TestBedRpcHeader(*from.hdr_);
  } else {
    hdr_ = NULL;
  }
  if (from.has_rx()) {
    rx_ = new ::sp::ste::PayloadSteSingleMeasurementRxParams(*from.rx_);
  } else {
    rx_ = NULL;
  }
  if (from.has_tx()) {
    tx_ = new ::sp::ste::PayloadSteSingleMeasurementTxParams(*from.tx_);
  } else {
    tx_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sp.ste.parameter_values)
}

void parameter_values::SharedCtor() {
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tx_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(tx_));
  _cached_size_ = 0;
}

parameter_values::~parameter_values() {
  // @@protoc_insertion_point(destructor:sp.ste.parameter_values)
  SharedDtor();
}

void parameter_values::SharedDtor() {
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete rx_;
  if (this != internal_default_instance()) delete tx_;
}

void parameter_values::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* parameter_values::descriptor() {
  ::protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sp_5fste_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const parameter_values& parameter_values::default_instance() {
  ::protobuf_sp_5fste_2eproto::InitDefaultsparameter_values();
  return *internal_default_instance();
}

parameter_values* parameter_values::New(::google::protobuf::Arena* arena) const {
  parameter_values* n = new parameter_values;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void parameter_values::Clear() {
// @@protoc_insertion_point(message_clear_start:sp.ste.parameter_values)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && hdr_ != NULL) {
    delete hdr_;
  }
  hdr_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_ != NULL) {
    delete rx_;
  }
  rx_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_ != NULL) {
    delete tx_;
  }
  tx_ = NULL;
  _internal_metadata_.Clear();
}

bool parameter_values::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sp.ste.parameter_values)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sp.ste.TestBedRpcHeader hdr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sp.ste.PayloadSteSingleMeasurementRxParams rx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sp.ste.PayloadSteSingleMeasurementTxParams tx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sp.ste.parameter_values)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sp.ste.parameter_values)
  return false;
#undef DO_
}

void parameter_values::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sp.ste.parameter_values)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sp.ste.TestBedRpcHeader hdr = 1;
  if (this->has_hdr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->hdr_, output);
  }

  // .sp.ste.PayloadSteSingleMeasurementRxParams rx = 2;
  if (this->has_rx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rx_, output);
  }

  // .sp.ste.PayloadSteSingleMeasurementTxParams tx = 3;
  if (this->has_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->tx_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sp.ste.parameter_values)
}

::google::protobuf::uint8* parameter_values::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sp.ste.parameter_values)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sp.ste.TestBedRpcHeader hdr = 1;
  if (this->has_hdr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->hdr_, deterministic, target);
  }

  // .sp.ste.PayloadSteSingleMeasurementRxParams rx = 2;
  if (this->has_rx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->rx_, deterministic, target);
  }

  // .sp.ste.PayloadSteSingleMeasurementTxParams tx = 3;
  if (this->has_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->tx_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sp.ste.parameter_values)
  return target;
}

size_t parameter_values::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sp.ste.parameter_values)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sp.ste.TestBedRpcHeader hdr = 1;
  if (this->has_hdr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->hdr_);
  }

  // .sp.ste.PayloadSteSingleMeasurementRxParams rx = 2;
  if (this->has_rx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_);
  }

  // .sp.ste.PayloadSteSingleMeasurementTxParams tx = 3;
  if (this->has_tx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void parameter_values::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sp.ste.parameter_values)
  GOOGLE_DCHECK_NE(&from, this);
  const parameter_values* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const parameter_values>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sp.ste.parameter_values)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sp.ste.parameter_values)
    MergeFrom(*source);
  }
}

void parameter_values::MergeFrom(const parameter_values& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sp.ste.parameter_values)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr()) {
    mutable_hdr()->::sp::ste::TestBedRpcHeader::MergeFrom(from.hdr());
  }
  if (from.has_rx()) {
    mutable_rx()->::sp::ste::PayloadSteSingleMeasurementRxParams::MergeFrom(from.rx());
  }
  if (from.has_tx()) {
    mutable_tx()->::sp::ste::PayloadSteSingleMeasurementTxParams::MergeFrom(from.tx());
  }
}

void parameter_values::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sp.ste.parameter_values)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void parameter_values::CopyFrom(const parameter_values& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sp.ste.parameter_values)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool parameter_values::IsInitialized() const {
  return true;
}

void parameter_values::Swap(parameter_values* other) {
  if (other == this) return;
  InternalSwap(other);
}
void parameter_values::InternalSwap(parameter_values* other) {
  using std::swap;
  swap(hdr_, other->hdr_);
  swap(rx_, other->rx_);
  swap(tx_, other->tx_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata parameter_values::GetMetadata() const {
  protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sp_5fste_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TestBedRpcHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestBedRpcHeader::kModuleFieldNumber;
const int TestBedRpcHeader::kCoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestBedRpcHeader::TestBedRpcHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sp_5fste_2eproto::InitDefaultsTestBedRpcHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sp.ste.TestBedRpcHeader)
}
TestBedRpcHeader::TestBedRpcHeader(const TestBedRpcHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.module().size() > 0) {
    module_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_);
  }
  core_ = from.core_;
  // @@protoc_insertion_point(copy_constructor:sp.ste.TestBedRpcHeader)
}

void TestBedRpcHeader::SharedCtor() {
  module_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  core_ = 0;
  _cached_size_ = 0;
}

TestBedRpcHeader::~TestBedRpcHeader() {
  // @@protoc_insertion_point(destructor:sp.ste.TestBedRpcHeader)
  SharedDtor();
}

void TestBedRpcHeader::SharedDtor() {
  module_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TestBedRpcHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestBedRpcHeader::descriptor() {
  ::protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sp_5fste_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestBedRpcHeader& TestBedRpcHeader::default_instance() {
  ::protobuf_sp_5fste_2eproto::InitDefaultsTestBedRpcHeader();
  return *internal_default_instance();
}

TestBedRpcHeader* TestBedRpcHeader::New(::google::protobuf::Arena* arena) const {
  TestBedRpcHeader* n = new TestBedRpcHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestBedRpcHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:sp.ste.TestBedRpcHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  module_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  core_ = 0;
  _internal_metadata_.Clear();
}

bool TestBedRpcHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sp.ste.TestBedRpcHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string module = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->module().data(), static_cast<int>(this->module().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sp.ste.TestBedRpcHeader.module"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 core = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &core_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sp.ste.TestBedRpcHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sp.ste.TestBedRpcHeader)
  return false;
#undef DO_
}

void TestBedRpcHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sp.ste.TestBedRpcHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string module = 1;
  if (this->module().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module().data(), static_cast<int>(this->module().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sp.ste.TestBedRpcHeader.module");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->module(), output);
  }

  // int32 core = 2;
  if (this->core() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->core(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sp.ste.TestBedRpcHeader)
}

::google::protobuf::uint8* TestBedRpcHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sp.ste.TestBedRpcHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string module = 1;
  if (this->module().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module().data(), static_cast<int>(this->module().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sp.ste.TestBedRpcHeader.module");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->module(), target);
  }

  // int32 core = 2;
  if (this->core() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->core(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sp.ste.TestBedRpcHeader)
  return target;
}

size_t TestBedRpcHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sp.ste.TestBedRpcHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string module = 1;
  if (this->module().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->module());
  }

  // int32 core = 2;
  if (this->core() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->core());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestBedRpcHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sp.ste.TestBedRpcHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const TestBedRpcHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestBedRpcHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sp.ste.TestBedRpcHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sp.ste.TestBedRpcHeader)
    MergeFrom(*source);
  }
}

void TestBedRpcHeader::MergeFrom(const TestBedRpcHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sp.ste.TestBedRpcHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.module().size() > 0) {

    module_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_);
  }
  if (from.core() != 0) {
    set_core(from.core());
  }
}

void TestBedRpcHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sp.ste.TestBedRpcHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestBedRpcHeader::CopyFrom(const TestBedRpcHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sp.ste.TestBedRpcHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestBedRpcHeader::IsInitialized() const {
  return true;
}

void TestBedRpcHeader::Swap(TestBedRpcHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestBedRpcHeader::InternalSwap(TestBedRpcHeader* other) {
  using std::swap;
  module_.Swap(&other->module_);
  swap(core_, other->core_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestBedRpcHeader::GetMetadata() const {
  protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sp_5fste_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PayloadSteSingleMeasurementTxParams::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PayloadSteSingleMeasurementTxParams::kTxFreq1HzFieldNumber;
const int PayloadSteSingleMeasurementTxParams::kTxPhase1RotFieldNumber;
const int PayloadSteSingleMeasurementTxParams::kTxFreq2HzFieldNumber;
const int PayloadSteSingleMeasurementTxParams::kTxPhase2RotFieldNumber;
const int PayloadSteSingleMeasurementTxParams::kGain1FieldNumber;
const int PayloadSteSingleMeasurementTxParams::kGain2FieldNumber;
const int PayloadSteSingleMeasurementTxParams::kGain3FieldNumber;
const int PayloadSteSingleMeasurementTxParams::kAwgnEnableFieldNumber;
const int PayloadSteSingleMeasurementTxParams::kNotchEnableFieldNumber;
const int PayloadSteSingleMeasurementTxParams::kNumTxSamplesTotalFieldNumber;
const int PayloadSteSingleMeasurementTxParams::kNumTxSamplesPerBatchFieldNumber;
const int PayloadSteSingleMeasurementTxParams::kFilebasenameFieldNumber;
const int PayloadSteSingleMeasurementTxParams::kFilenameTxSamplesFieldNumber;
const int PayloadSteSingleMeasurementTxParams::kNextTxStartTimeFieldNumber;
const int PayloadSteSingleMeasurementTxParams::kTxIdlePatternFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PayloadSteSingleMeasurementTxParams::PayloadSteSingleMeasurementTxParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sp_5fste_2eproto::InitDefaultsPayloadSteSingleMeasurementTxParams();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sp.ste.PayloadSteSingleMeasurementTxParams)
}
PayloadSteSingleMeasurementTxParams::PayloadSteSingleMeasurementTxParams(const PayloadSteSingleMeasurementTxParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filebasename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filebasename().size() > 0) {
    filebasename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filebasename_);
  }
  filename_tx_samples_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename_tx_samples().size() > 0) {
    filename_tx_samples_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_tx_samples_);
  }
  ::memcpy(&tx_freq1_hz_, &from.tx_freq1_hz_,
    static_cast<size_t>(reinterpret_cast<char*>(&tx_idle_pattern_) -
    reinterpret_cast<char*>(&tx_freq1_hz_)) + sizeof(tx_idle_pattern_));
  // @@protoc_insertion_point(copy_constructor:sp.ste.PayloadSteSingleMeasurementTxParams)
}

void PayloadSteSingleMeasurementTxParams::SharedCtor() {
  filebasename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_tx_samples_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tx_freq1_hz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tx_idle_pattern_) -
      reinterpret_cast<char*>(&tx_freq1_hz_)) + sizeof(tx_idle_pattern_));
  _cached_size_ = 0;
}

PayloadSteSingleMeasurementTxParams::~PayloadSteSingleMeasurementTxParams() {
  // @@protoc_insertion_point(destructor:sp.ste.PayloadSteSingleMeasurementTxParams)
  SharedDtor();
}

void PayloadSteSingleMeasurementTxParams::SharedDtor() {
  filebasename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_tx_samples_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PayloadSteSingleMeasurementTxParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayloadSteSingleMeasurementTxParams::descriptor() {
  ::protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sp_5fste_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PayloadSteSingleMeasurementTxParams& PayloadSteSingleMeasurementTxParams::default_instance() {
  ::protobuf_sp_5fste_2eproto::InitDefaultsPayloadSteSingleMeasurementTxParams();
  return *internal_default_instance();
}

PayloadSteSingleMeasurementTxParams* PayloadSteSingleMeasurementTxParams::New(::google::protobuf::Arena* arena) const {
  PayloadSteSingleMeasurementTxParams* n = new PayloadSteSingleMeasurementTxParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PayloadSteSingleMeasurementTxParams::Clear() {
// @@protoc_insertion_point(message_clear_start:sp.ste.PayloadSteSingleMeasurementTxParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filebasename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_tx_samples_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tx_freq1_hz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tx_idle_pattern_) -
      reinterpret_cast<char*>(&tx_freq1_hz_)) + sizeof(tx_idle_pattern_));
  _internal_metadata_.Clear();
}

bool PayloadSteSingleMeasurementTxParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sp.ste.PayloadSteSingleMeasurementTxParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float tx_freq1_Hz = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tx_freq1_hz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tx_phase1_rot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tx_phase1_rot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tx_freq2_Hz = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tx_freq2_hz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tx_phase2_rot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tx_phase2_rot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gain1 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gain1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gain2 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gain2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gain3 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gain3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool awgn_enable = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &awgn_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool notch_enable = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notch_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_tx_samples_total = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_tx_samples_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_tx_samples_per_batch = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_tx_samples_per_batch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filebasename = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filebasename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filebasename().data(), static_cast<int>(this->filebasename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sp.ste.PayloadSteSingleMeasurementTxParams.filebasename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filename_tx_samples = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename_tx_samples()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename_tx_samples().data(), static_cast<int>(this->filename_tx_samples().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sp.ste.PayloadSteSingleMeasurementTxParams.filename_tx_samples"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 nextTxStartTime = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nexttxstarttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sp.ste.TxIdlePattern tx_idle_pattern = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tx_idle_pattern(static_cast< ::sp::ste::TxIdlePattern >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sp.ste.PayloadSteSingleMeasurementTxParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sp.ste.PayloadSteSingleMeasurementTxParams)
  return false;
#undef DO_
}

void PayloadSteSingleMeasurementTxParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sp.ste.PayloadSteSingleMeasurementTxParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float tx_freq1_Hz = 1;
  if (this->tx_freq1_hz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->tx_freq1_hz(), output);
  }

  // float tx_phase1_rot = 2;
  if (this->tx_phase1_rot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->tx_phase1_rot(), output);
  }

  // float tx_freq2_Hz = 3;
  if (this->tx_freq2_hz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->tx_freq2_hz(), output);
  }

  // float tx_phase2_rot = 4;
  if (this->tx_phase2_rot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->tx_phase2_rot(), output);
  }

  // float gain1 = 5;
  if (this->gain1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->gain1(), output);
  }

  // float gain2 = 6;
  if (this->gain2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->gain2(), output);
  }

  // float gain3 = 7;
  if (this->gain3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->gain3(), output);
  }

  // bool awgn_enable = 8;
  if (this->awgn_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->awgn_enable(), output);
  }

  // bool notch_enable = 9;
  if (this->notch_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->notch_enable(), output);
  }

  // uint32 num_tx_samples_total = 10;
  if (this->num_tx_samples_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->num_tx_samples_total(), output);
  }

  // uint32 num_tx_samples_per_batch = 11;
  if (this->num_tx_samples_per_batch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->num_tx_samples_per_batch(), output);
  }

  // string filebasename = 12;
  if (this->filebasename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filebasename().data(), static_cast<int>(this->filebasename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sp.ste.PayloadSteSingleMeasurementTxParams.filebasename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->filebasename(), output);
  }

  // string filename_tx_samples = 13;
  if (this->filename_tx_samples().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename_tx_samples().data(), static_cast<int>(this->filename_tx_samples().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sp.ste.PayloadSteSingleMeasurementTxParams.filename_tx_samples");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->filename_tx_samples(), output);
  }

  // uint64 nextTxStartTime = 14;
  if (this->nexttxstarttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->nexttxstarttime(), output);
  }

  // .sp.ste.TxIdlePattern tx_idle_pattern = 15;
  if (this->tx_idle_pattern() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->tx_idle_pattern(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sp.ste.PayloadSteSingleMeasurementTxParams)
}

::google::protobuf::uint8* PayloadSteSingleMeasurementTxParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sp.ste.PayloadSteSingleMeasurementTxParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float tx_freq1_Hz = 1;
  if (this->tx_freq1_hz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->tx_freq1_hz(), target);
  }

  // float tx_phase1_rot = 2;
  if (this->tx_phase1_rot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->tx_phase1_rot(), target);
  }

  // float tx_freq2_Hz = 3;
  if (this->tx_freq2_hz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->tx_freq2_hz(), target);
  }

  // float tx_phase2_rot = 4;
  if (this->tx_phase2_rot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->tx_phase2_rot(), target);
  }

  // float gain1 = 5;
  if (this->gain1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->gain1(), target);
  }

  // float gain2 = 6;
  if (this->gain2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->gain2(), target);
  }

  // float gain3 = 7;
  if (this->gain3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->gain3(), target);
  }

  // bool awgn_enable = 8;
  if (this->awgn_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->awgn_enable(), target);
  }

  // bool notch_enable = 9;
  if (this->notch_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->notch_enable(), target);
  }

  // uint32 num_tx_samples_total = 10;
  if (this->num_tx_samples_total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->num_tx_samples_total(), target);
  }

  // uint32 num_tx_samples_per_batch = 11;
  if (this->num_tx_samples_per_batch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->num_tx_samples_per_batch(), target);
  }

  // string filebasename = 12;
  if (this->filebasename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filebasename().data(), static_cast<int>(this->filebasename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sp.ste.PayloadSteSingleMeasurementTxParams.filebasename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->filebasename(), target);
  }

  // string filename_tx_samples = 13;
  if (this->filename_tx_samples().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename_tx_samples().data(), static_cast<int>(this->filename_tx_samples().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sp.ste.PayloadSteSingleMeasurementTxParams.filename_tx_samples");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->filename_tx_samples(), target);
  }

  // uint64 nextTxStartTime = 14;
  if (this->nexttxstarttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->nexttxstarttime(), target);
  }

  // .sp.ste.TxIdlePattern tx_idle_pattern = 15;
  if (this->tx_idle_pattern() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->tx_idle_pattern(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sp.ste.PayloadSteSingleMeasurementTxParams)
  return target;
}

size_t PayloadSteSingleMeasurementTxParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sp.ste.PayloadSteSingleMeasurementTxParams)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string filebasename = 12;
  if (this->filebasename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filebasename());
  }

  // string filename_tx_samples = 13;
  if (this->filename_tx_samples().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename_tx_samples());
  }

  // float tx_freq1_Hz = 1;
  if (this->tx_freq1_hz() != 0) {
    total_size += 1 + 4;
  }

  // float tx_phase1_rot = 2;
  if (this->tx_phase1_rot() != 0) {
    total_size += 1 + 4;
  }

  // float tx_freq2_Hz = 3;
  if (this->tx_freq2_hz() != 0) {
    total_size += 1 + 4;
  }

  // float tx_phase2_rot = 4;
  if (this->tx_phase2_rot() != 0) {
    total_size += 1 + 4;
  }

  // float gain1 = 5;
  if (this->gain1() != 0) {
    total_size += 1 + 4;
  }

  // float gain2 = 6;
  if (this->gain2() != 0) {
    total_size += 1 + 4;
  }

  // float gain3 = 7;
  if (this->gain3() != 0) {
    total_size += 1 + 4;
  }

  // bool awgn_enable = 8;
  if (this->awgn_enable() != 0) {
    total_size += 1 + 1;
  }

  // bool notch_enable = 9;
  if (this->notch_enable() != 0) {
    total_size += 1 + 1;
  }

  // uint32 num_tx_samples_total = 10;
  if (this->num_tx_samples_total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_tx_samples_total());
  }

  // uint32 num_tx_samples_per_batch = 11;
  if (this->num_tx_samples_per_batch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_tx_samples_per_batch());
  }

  // uint64 nextTxStartTime = 14;
  if (this->nexttxstarttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nexttxstarttime());
  }

  // .sp.ste.TxIdlePattern tx_idle_pattern = 15;
  if (this->tx_idle_pattern() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tx_idle_pattern());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayloadSteSingleMeasurementTxParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sp.ste.PayloadSteSingleMeasurementTxParams)
  GOOGLE_DCHECK_NE(&from, this);
  const PayloadSteSingleMeasurementTxParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PayloadSteSingleMeasurementTxParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sp.ste.PayloadSteSingleMeasurementTxParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sp.ste.PayloadSteSingleMeasurementTxParams)
    MergeFrom(*source);
  }
}

void PayloadSteSingleMeasurementTxParams::MergeFrom(const PayloadSteSingleMeasurementTxParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sp.ste.PayloadSteSingleMeasurementTxParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filebasename().size() > 0) {

    filebasename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filebasename_);
  }
  if (from.filename_tx_samples().size() > 0) {

    filename_tx_samples_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_tx_samples_);
  }
  if (from.tx_freq1_hz() != 0) {
    set_tx_freq1_hz(from.tx_freq1_hz());
  }
  if (from.tx_phase1_rot() != 0) {
    set_tx_phase1_rot(from.tx_phase1_rot());
  }
  if (from.tx_freq2_hz() != 0) {
    set_tx_freq2_hz(from.tx_freq2_hz());
  }
  if (from.tx_phase2_rot() != 0) {
    set_tx_phase2_rot(from.tx_phase2_rot());
  }
  if (from.gain1() != 0) {
    set_gain1(from.gain1());
  }
  if (from.gain2() != 0) {
    set_gain2(from.gain2());
  }
  if (from.gain3() != 0) {
    set_gain3(from.gain3());
  }
  if (from.awgn_enable() != 0) {
    set_awgn_enable(from.awgn_enable());
  }
  if (from.notch_enable() != 0) {
    set_notch_enable(from.notch_enable());
  }
  if (from.num_tx_samples_total() != 0) {
    set_num_tx_samples_total(from.num_tx_samples_total());
  }
  if (from.num_tx_samples_per_batch() != 0) {
    set_num_tx_samples_per_batch(from.num_tx_samples_per_batch());
  }
  if (from.nexttxstarttime() != 0) {
    set_nexttxstarttime(from.nexttxstarttime());
  }
  if (from.tx_idle_pattern() != 0) {
    set_tx_idle_pattern(from.tx_idle_pattern());
  }
}

void PayloadSteSingleMeasurementTxParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sp.ste.PayloadSteSingleMeasurementTxParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayloadSteSingleMeasurementTxParams::CopyFrom(const PayloadSteSingleMeasurementTxParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sp.ste.PayloadSteSingleMeasurementTxParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayloadSteSingleMeasurementTxParams::IsInitialized() const {
  return true;
}

void PayloadSteSingleMeasurementTxParams::Swap(PayloadSteSingleMeasurementTxParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PayloadSteSingleMeasurementTxParams::InternalSwap(PayloadSteSingleMeasurementTxParams* other) {
  using std::swap;
  filebasename_.Swap(&other->filebasename_);
  filename_tx_samples_.Swap(&other->filename_tx_samples_);
  swap(tx_freq1_hz_, other->tx_freq1_hz_);
  swap(tx_phase1_rot_, other->tx_phase1_rot_);
  swap(tx_freq2_hz_, other->tx_freq2_hz_);
  swap(tx_phase2_rot_, other->tx_phase2_rot_);
  swap(gain1_, other->gain1_);
  swap(gain2_, other->gain2_);
  swap(gain3_, other->gain3_);
  swap(awgn_enable_, other->awgn_enable_);
  swap(notch_enable_, other->notch_enable_);
  swap(num_tx_samples_total_, other->num_tx_samples_total_);
  swap(num_tx_samples_per_batch_, other->num_tx_samples_per_batch_);
  swap(nexttxstarttime_, other->nexttxstarttime_);
  swap(tx_idle_pattern_, other->tx_idle_pattern_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PayloadSteSingleMeasurementTxParams::GetMetadata() const {
  protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sp_5fste_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PayloadSteSingleMeasurementRxParams::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PayloadSteSingleMeasurementRxParams::kFftLengthAFieldNumber;
const int PayloadSteSingleMeasurementRxParams::kFftLengthBFieldNumber;
const int PayloadSteSingleMeasurementRxParams::kFftBatchesAFieldNumber;
const int PayloadSteSingleMeasurementRxParams::kFftBatchesBFieldNumber;
const int PayloadSteSingleMeasurementRxParams::kRxRotFreqHzFieldNumber;
const int PayloadSteSingleMeasurementRxParams::kDecimationFieldNumber;
const int PayloadSteSingleMeasurementRxParams::kNumRxSamplesFieldNumber;
const int PayloadSteSingleMeasurementRxParams::kSaveIqFieldNumber;
const int PayloadSteSingleMeasurementRxParams::kFftAEnableFieldNumber;
const int PayloadSteSingleMeasurementRxParams::kFftBEnableFieldNumber;
const int PayloadSteSingleMeasurementRxParams::kParameterEstimateEnableFieldNumber;
const int PayloadSteSingleMeasurementRxParams::kFilebasenameFieldNumber;
const int PayloadSteSingleMeasurementRxParams::kFilenameFftAFieldNumber;
const int PayloadSteSingleMeasurementRxParams::kFilenameFftBFieldNumber;
const int PayloadSteSingleMeasurementRxParams::kFilenameRxSamplesFieldNumber;
const int PayloadSteSingleMeasurementRxParams::kNextRxStartTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PayloadSteSingleMeasurementRxParams::PayloadSteSingleMeasurementRxParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sp_5fste_2eproto::InitDefaultsPayloadSteSingleMeasurementRxParams();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sp.ste.PayloadSteSingleMeasurementRxParams)
}
PayloadSteSingleMeasurementRxParams::PayloadSteSingleMeasurementRxParams(const PayloadSteSingleMeasurementRxParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filebasename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filebasename().size() > 0) {
    filebasename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filebasename_);
  }
  filename_fft_a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename_fft_a().size() > 0) {
    filename_fft_a_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_fft_a_);
  }
  filename_fft_b_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename_fft_b().size() > 0) {
    filename_fft_b_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_fft_b_);
  }
  filename_rx_samples_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename_rx_samples().size() > 0) {
    filename_rx_samples_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_rx_samples_);
  }
  ::memcpy(&fft_length_a_, &from.fft_length_a_,
    static_cast<size_t>(reinterpret_cast<char*>(&nextrxstarttime_) -
    reinterpret_cast<char*>(&fft_length_a_)) + sizeof(nextrxstarttime_));
  // @@protoc_insertion_point(copy_constructor:sp.ste.PayloadSteSingleMeasurementRxParams)
}

void PayloadSteSingleMeasurementRxParams::SharedCtor() {
  filebasename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_fft_a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_fft_b_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_rx_samples_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fft_length_a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nextrxstarttime_) -
      reinterpret_cast<char*>(&fft_length_a_)) + sizeof(nextrxstarttime_));
  _cached_size_ = 0;
}

PayloadSteSingleMeasurementRxParams::~PayloadSteSingleMeasurementRxParams() {
  // @@protoc_insertion_point(destructor:sp.ste.PayloadSteSingleMeasurementRxParams)
  SharedDtor();
}

void PayloadSteSingleMeasurementRxParams::SharedDtor() {
  filebasename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_fft_a_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_fft_b_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_rx_samples_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PayloadSteSingleMeasurementRxParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayloadSteSingleMeasurementRxParams::descriptor() {
  ::protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sp_5fste_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PayloadSteSingleMeasurementRxParams& PayloadSteSingleMeasurementRxParams::default_instance() {
  ::protobuf_sp_5fste_2eproto::InitDefaultsPayloadSteSingleMeasurementRxParams();
  return *internal_default_instance();
}

PayloadSteSingleMeasurementRxParams* PayloadSteSingleMeasurementRxParams::New(::google::protobuf::Arena* arena) const {
  PayloadSteSingleMeasurementRxParams* n = new PayloadSteSingleMeasurementRxParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PayloadSteSingleMeasurementRxParams::Clear() {
// @@protoc_insertion_point(message_clear_start:sp.ste.PayloadSteSingleMeasurementRxParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filebasename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_fft_a_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_fft_b_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_rx_samples_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fft_length_a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nextrxstarttime_) -
      reinterpret_cast<char*>(&fft_length_a_)) + sizeof(nextrxstarttime_));
  _internal_metadata_.Clear();
}

bool PayloadSteSingleMeasurementRxParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sp.ste.PayloadSteSingleMeasurementRxParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 fft_length_a = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fft_length_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fft_length_b = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fft_length_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fft_batches_a = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fft_batches_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fft_batches_b = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fft_batches_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rx_rot_freq_Hz = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rx_rot_freq_hz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 decimation = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &decimation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_rx_samples = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_rx_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool save_iq = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &save_iq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fft_a_enable = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fft_a_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fft_b_enable = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fft_b_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool parameter_estimate_enable = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &parameter_estimate_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filebasename = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filebasename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filebasename().data(), static_cast<int>(this->filebasename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sp.ste.PayloadSteSingleMeasurementRxParams.filebasename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filename_fft_a = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename_fft_a()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename_fft_a().data(), static_cast<int>(this->filename_fft_a().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sp.ste.PayloadSteSingleMeasurementRxParams.filename_fft_a"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filename_fft_b = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename_fft_b()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename_fft_b().data(), static_cast<int>(this->filename_fft_b().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sp.ste.PayloadSteSingleMeasurementRxParams.filename_fft_b"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filename_rx_samples = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename_rx_samples()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename_rx_samples().data(), static_cast<int>(this->filename_rx_samples().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sp.ste.PayloadSteSingleMeasurementRxParams.filename_rx_samples"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 nextRxStartTime = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nextrxstarttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sp.ste.PayloadSteSingleMeasurementRxParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sp.ste.PayloadSteSingleMeasurementRxParams)
  return false;
#undef DO_
}

void PayloadSteSingleMeasurementRxParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sp.ste.PayloadSteSingleMeasurementRxParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fft_length_a = 1;
  if (this->fft_length_a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fft_length_a(), output);
  }

  // uint32 fft_length_b = 2;
  if (this->fft_length_b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fft_length_b(), output);
  }

  // uint32 fft_batches_a = 3;
  if (this->fft_batches_a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fft_batches_a(), output);
  }

  // uint32 fft_batches_b = 4;
  if (this->fft_batches_b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fft_batches_b(), output);
  }

  // float rx_rot_freq_Hz = 5;
  if (this->rx_rot_freq_hz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rx_rot_freq_hz(), output);
  }

  // uint32 decimation = 6;
  if (this->decimation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->decimation(), output);
  }

  // uint32 num_rx_samples = 7;
  if (this->num_rx_samples() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num_rx_samples(), output);
  }

  // bool save_iq = 8;
  if (this->save_iq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->save_iq(), output);
  }

  // bool fft_a_enable = 9;
  if (this->fft_a_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->fft_a_enable(), output);
  }

  // bool fft_b_enable = 10;
  if (this->fft_b_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->fft_b_enable(), output);
  }

  // bool parameter_estimate_enable = 11;
  if (this->parameter_estimate_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->parameter_estimate_enable(), output);
  }

  // string filebasename = 12;
  if (this->filebasename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filebasename().data(), static_cast<int>(this->filebasename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sp.ste.PayloadSteSingleMeasurementRxParams.filebasename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->filebasename(), output);
  }

  // string filename_fft_a = 13;
  if (this->filename_fft_a().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename_fft_a().data(), static_cast<int>(this->filename_fft_a().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sp.ste.PayloadSteSingleMeasurementRxParams.filename_fft_a");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->filename_fft_a(), output);
  }

  // string filename_fft_b = 14;
  if (this->filename_fft_b().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename_fft_b().data(), static_cast<int>(this->filename_fft_b().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sp.ste.PayloadSteSingleMeasurementRxParams.filename_fft_b");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->filename_fft_b(), output);
  }

  // string filename_rx_samples = 15;
  if (this->filename_rx_samples().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename_rx_samples().data(), static_cast<int>(this->filename_rx_samples().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sp.ste.PayloadSteSingleMeasurementRxParams.filename_rx_samples");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->filename_rx_samples(), output);
  }

  // uint64 nextRxStartTime = 16;
  if (this->nextrxstarttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->nextrxstarttime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sp.ste.PayloadSteSingleMeasurementRxParams)
}

::google::protobuf::uint8* PayloadSteSingleMeasurementRxParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sp.ste.PayloadSteSingleMeasurementRxParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fft_length_a = 1;
  if (this->fft_length_a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fft_length_a(), target);
  }

  // uint32 fft_length_b = 2;
  if (this->fft_length_b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fft_length_b(), target);
  }

  // uint32 fft_batches_a = 3;
  if (this->fft_batches_a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fft_batches_a(), target);
  }

  // uint32 fft_batches_b = 4;
  if (this->fft_batches_b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fft_batches_b(), target);
  }

  // float rx_rot_freq_Hz = 5;
  if (this->rx_rot_freq_hz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rx_rot_freq_hz(), target);
  }

  // uint32 decimation = 6;
  if (this->decimation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->decimation(), target);
  }

  // uint32 num_rx_samples = 7;
  if (this->num_rx_samples() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->num_rx_samples(), target);
  }

  // bool save_iq = 8;
  if (this->save_iq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->save_iq(), target);
  }

  // bool fft_a_enable = 9;
  if (this->fft_a_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->fft_a_enable(), target);
  }

  // bool fft_b_enable = 10;
  if (this->fft_b_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->fft_b_enable(), target);
  }

  // bool parameter_estimate_enable = 11;
  if (this->parameter_estimate_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->parameter_estimate_enable(), target);
  }

  // string filebasename = 12;
  if (this->filebasename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filebasename().data(), static_cast<int>(this->filebasename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sp.ste.PayloadSteSingleMeasurementRxParams.filebasename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->filebasename(), target);
  }

  // string filename_fft_a = 13;
  if (this->filename_fft_a().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename_fft_a().data(), static_cast<int>(this->filename_fft_a().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sp.ste.PayloadSteSingleMeasurementRxParams.filename_fft_a");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->filename_fft_a(), target);
  }

  // string filename_fft_b = 14;
  if (this->filename_fft_b().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename_fft_b().data(), static_cast<int>(this->filename_fft_b().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sp.ste.PayloadSteSingleMeasurementRxParams.filename_fft_b");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->filename_fft_b(), target);
  }

  // string filename_rx_samples = 15;
  if (this->filename_rx_samples().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename_rx_samples().data(), static_cast<int>(this->filename_rx_samples().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sp.ste.PayloadSteSingleMeasurementRxParams.filename_rx_samples");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->filename_rx_samples(), target);
  }

  // uint64 nextRxStartTime = 16;
  if (this->nextrxstarttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->nextrxstarttime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sp.ste.PayloadSteSingleMeasurementRxParams)
  return target;
}

size_t PayloadSteSingleMeasurementRxParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sp.ste.PayloadSteSingleMeasurementRxParams)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string filebasename = 12;
  if (this->filebasename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filebasename());
  }

  // string filename_fft_a = 13;
  if (this->filename_fft_a().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename_fft_a());
  }

  // string filename_fft_b = 14;
  if (this->filename_fft_b().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename_fft_b());
  }

  // string filename_rx_samples = 15;
  if (this->filename_rx_samples().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename_rx_samples());
  }

  // uint32 fft_length_a = 1;
  if (this->fft_length_a() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fft_length_a());
  }

  // uint32 fft_length_b = 2;
  if (this->fft_length_b() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fft_length_b());
  }

  // uint32 fft_batches_a = 3;
  if (this->fft_batches_a() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fft_batches_a());
  }

  // uint32 fft_batches_b = 4;
  if (this->fft_batches_b() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fft_batches_b());
  }

  // float rx_rot_freq_Hz = 5;
  if (this->rx_rot_freq_hz() != 0) {
    total_size += 1 + 4;
  }

  // uint32 decimation = 6;
  if (this->decimation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->decimation());
  }

  // uint32 num_rx_samples = 7;
  if (this->num_rx_samples() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_rx_samples());
  }

  // bool save_iq = 8;
  if (this->save_iq() != 0) {
    total_size += 1 + 1;
  }

  // bool fft_a_enable = 9;
  if (this->fft_a_enable() != 0) {
    total_size += 1 + 1;
  }

  // bool fft_b_enable = 10;
  if (this->fft_b_enable() != 0) {
    total_size += 1 + 1;
  }

  // bool parameter_estimate_enable = 11;
  if (this->parameter_estimate_enable() != 0) {
    total_size += 1 + 1;
  }

  // uint64 nextRxStartTime = 16;
  if (this->nextrxstarttime() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nextrxstarttime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayloadSteSingleMeasurementRxParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sp.ste.PayloadSteSingleMeasurementRxParams)
  GOOGLE_DCHECK_NE(&from, this);
  const PayloadSteSingleMeasurementRxParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PayloadSteSingleMeasurementRxParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sp.ste.PayloadSteSingleMeasurementRxParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sp.ste.PayloadSteSingleMeasurementRxParams)
    MergeFrom(*source);
  }
}

void PayloadSteSingleMeasurementRxParams::MergeFrom(const PayloadSteSingleMeasurementRxParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sp.ste.PayloadSteSingleMeasurementRxParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filebasename().size() > 0) {

    filebasename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filebasename_);
  }
  if (from.filename_fft_a().size() > 0) {

    filename_fft_a_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_fft_a_);
  }
  if (from.filename_fft_b().size() > 0) {

    filename_fft_b_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_fft_b_);
  }
  if (from.filename_rx_samples().size() > 0) {

    filename_rx_samples_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_rx_samples_);
  }
  if (from.fft_length_a() != 0) {
    set_fft_length_a(from.fft_length_a());
  }
  if (from.fft_length_b() != 0) {
    set_fft_length_b(from.fft_length_b());
  }
  if (from.fft_batches_a() != 0) {
    set_fft_batches_a(from.fft_batches_a());
  }
  if (from.fft_batches_b() != 0) {
    set_fft_batches_b(from.fft_batches_b());
  }
  if (from.rx_rot_freq_hz() != 0) {
    set_rx_rot_freq_hz(from.rx_rot_freq_hz());
  }
  if (from.decimation() != 0) {
    set_decimation(from.decimation());
  }
  if (from.num_rx_samples() != 0) {
    set_num_rx_samples(from.num_rx_samples());
  }
  if (from.save_iq() != 0) {
    set_save_iq(from.save_iq());
  }
  if (from.fft_a_enable() != 0) {
    set_fft_a_enable(from.fft_a_enable());
  }
  if (from.fft_b_enable() != 0) {
    set_fft_b_enable(from.fft_b_enable());
  }
  if (from.parameter_estimate_enable() != 0) {
    set_parameter_estimate_enable(from.parameter_estimate_enable());
  }
  if (from.nextrxstarttime() != 0) {
    set_nextrxstarttime(from.nextrxstarttime());
  }
}

void PayloadSteSingleMeasurementRxParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sp.ste.PayloadSteSingleMeasurementRxParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayloadSteSingleMeasurementRxParams::CopyFrom(const PayloadSteSingleMeasurementRxParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sp.ste.PayloadSteSingleMeasurementRxParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayloadSteSingleMeasurementRxParams::IsInitialized() const {
  return true;
}

void PayloadSteSingleMeasurementRxParams::Swap(PayloadSteSingleMeasurementRxParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PayloadSteSingleMeasurementRxParams::InternalSwap(PayloadSteSingleMeasurementRxParams* other) {
  using std::swap;
  filebasename_.Swap(&other->filebasename_);
  filename_fft_a_.Swap(&other->filename_fft_a_);
  filename_fft_b_.Swap(&other->filename_fft_b_);
  filename_rx_samples_.Swap(&other->filename_rx_samples_);
  swap(fft_length_a_, other->fft_length_a_);
  swap(fft_length_b_, other->fft_length_b_);
  swap(fft_batches_a_, other->fft_batches_a_);
  swap(fft_batches_b_, other->fft_batches_b_);
  swap(rx_rot_freq_hz_, other->rx_rot_freq_hz_);
  swap(decimation_, other->decimation_);
  swap(num_rx_samples_, other->num_rx_samples_);
  swap(save_iq_, other->save_iq_);
  swap(fft_a_enable_, other->fft_a_enable_);
  swap(fft_b_enable_, other->fft_b_enable_);
  swap(parameter_estimate_enable_, other->parameter_estimate_enable_);
  swap(nextrxstarttime_, other->nextrxstarttime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PayloadSteSingleMeasurementRxParams::GetMetadata() const {
  protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sp_5fste_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void null_message::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

null_message::null_message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sp_5fste_2eproto::InitDefaultsnull_message();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sp.ste.null_message)
}
null_message::null_message(const null_message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sp.ste.null_message)
}

void null_message::SharedCtor() {
  _cached_size_ = 0;
}

null_message::~null_message() {
  // @@protoc_insertion_point(destructor:sp.ste.null_message)
  SharedDtor();
}

void null_message::SharedDtor() {
}

void null_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* null_message::descriptor() {
  ::protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sp_5fste_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const null_message& null_message::default_instance() {
  ::protobuf_sp_5fste_2eproto::InitDefaultsnull_message();
  return *internal_default_instance();
}

null_message* null_message::New(::google::protobuf::Arena* arena) const {
  null_message* n = new null_message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void null_message::Clear() {
// @@protoc_insertion_point(message_clear_start:sp.ste.null_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool null_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sp.ste.null_message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:sp.ste.null_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sp.ste.null_message)
  return false;
#undef DO_
}

void null_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sp.ste.null_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sp.ste.null_message)
}

::google::protobuf::uint8* null_message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sp.ste.null_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sp.ste.null_message)
  return target;
}

size_t null_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sp.ste.null_message)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void null_message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sp.ste.null_message)
  GOOGLE_DCHECK_NE(&from, this);
  const null_message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const null_message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sp.ste.null_message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sp.ste.null_message)
    MergeFrom(*source);
  }
}

void null_message::MergeFrom(const null_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sp.ste.null_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void null_message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sp.ste.null_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void null_message::CopyFrom(const null_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sp.ste.null_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool null_message::IsInitialized() const {
  return true;
}

void null_message::Swap(null_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void null_message::InternalSwap(null_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata null_message::GetMetadata() const {
  protobuf_sp_5fste_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sp_5fste_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ste
}  // namespace sp

// @@protoc_insertion_point(global_scope)

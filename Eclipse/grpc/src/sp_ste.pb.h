// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sp_ste.proto

#ifndef PROTOBUF_sp_5fste_2eproto__INCLUDED
#define PROTOBUF_sp_5fste_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_sp_5fste_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsset_parametersImpl();
void InitDefaultsset_parameters();
void InitDefaultsparameter_valuesImpl();
void InitDefaultsparameter_values();
void InitDefaultsnum_paramsImpl();
void InitDefaultsnum_params();
void InitDefaultsstate_parametersImpl();
void InitDefaultsstate_parameters();
void InitDefaultstx_parametersImpl();
void InitDefaultstx_parameters();
void InitDefaultsfft_parametersImpl();
void InitDefaultsfft_parameters();
void InitDefaultsother_parametersImpl();
void InitDefaultsother_parameters();
void InitDefaultsnull_messageImpl();
void InitDefaultsnull_message();
inline void InitDefaults() {
  InitDefaultsset_parameters();
  InitDefaultsparameter_values();
  InitDefaultsnum_params();
  InitDefaultsstate_parameters();
  InitDefaultstx_parameters();
  InitDefaultsfft_parameters();
  InitDefaultsother_parameters();
  InitDefaultsnull_message();
}
}  // namespace protobuf_sp_5fste_2eproto
namespace sp {
namespace ste {
class fft_parameters;
class fft_parametersDefaultTypeInternal;
extern fft_parametersDefaultTypeInternal _fft_parameters_default_instance_;
class null_message;
class null_messageDefaultTypeInternal;
extern null_messageDefaultTypeInternal _null_message_default_instance_;
class num_params;
class num_paramsDefaultTypeInternal;
extern num_paramsDefaultTypeInternal _num_params_default_instance_;
class other_parameters;
class other_parametersDefaultTypeInternal;
extern other_parametersDefaultTypeInternal _other_parameters_default_instance_;
class parameter_values;
class parameter_valuesDefaultTypeInternal;
extern parameter_valuesDefaultTypeInternal _parameter_values_default_instance_;
class set_parameters;
class set_parametersDefaultTypeInternal;
extern set_parametersDefaultTypeInternal _set_parameters_default_instance_;
class state_parameters;
class state_parametersDefaultTypeInternal;
extern state_parametersDefaultTypeInternal _state_parameters_default_instance_;
class tx_parameters;
class tx_parametersDefaultTypeInternal;
extern tx_parametersDefaultTypeInternal _tx_parameters_default_instance_;
}  // namespace ste
}  // namespace sp
namespace sp {
namespace ste {

enum state {
  DISABLED = 0,
  OFF = 0,
  NOTRUNNING = 0,
  COMPLETE = 0,
  ENABLED = 1,
  ON = 1,
  RUNNING = 1,
  INCOMPLETE = 1,
  state_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  state_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool state_IsValid(int value);
const state state_MIN = DISABLED;
const state state_MAX = ENABLED;
const int state_ARRAYSIZE = state_MAX + 1;

const ::google::protobuf::EnumDescriptor* state_descriptor();
inline const ::std::string& state_Name(state value) {
  return ::google::protobuf::internal::NameOfEnum(
    state_descriptor(), value);
}
inline bool state_Parse(
    const ::std::string& name, state* value) {
  return ::google::protobuf::internal::ParseNamedEnum<state>(
    state_descriptor(), name, value);
}
// ===================================================================

class set_parameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sp.ste.set_parameters) */ {
 public:
  set_parameters();
  virtual ~set_parameters();

  set_parameters(const set_parameters& from);

  inline set_parameters& operator=(const set_parameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  set_parameters(set_parameters&& from) noexcept
    : set_parameters() {
    *this = ::std::move(from);
  }

  inline set_parameters& operator=(set_parameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const set_parameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const set_parameters* internal_default_instance() {
    return reinterpret_cast<const set_parameters*>(
               &_set_parameters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(set_parameters* other);
  friend void swap(set_parameters& a, set_parameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline set_parameters* New() const PROTOBUF_FINAL { return New(NULL); }

  set_parameters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const set_parameters& from);
  void MergeFrom(const set_parameters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(set_parameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .sp.ste.num_params num_params = 1;
  bool has_num_params() const;
  void clear_num_params();
  static const int kNumParamsFieldNumber = 1;
  const ::sp::ste::num_params& num_params() const;
  ::sp::ste::num_params* release_num_params();
  ::sp::ste::num_params* mutable_num_params();
  void set_allocated_num_params(::sp::ste::num_params* num_params);

  // .sp.ste.state_parameters state_parameters = 2;
  bool has_state_parameters() const;
  void clear_state_parameters();
  static const int kStateParametersFieldNumber = 2;
  const ::sp::ste::state_parameters& state_parameters() const;
  ::sp::ste::state_parameters* release_state_parameters();
  ::sp::ste::state_parameters* mutable_state_parameters();
  void set_allocated_state_parameters(::sp::ste::state_parameters* state_parameters);

  // .sp.ste.tx_parameters tx_parameters = 3;
  bool has_tx_parameters() const;
  void clear_tx_parameters();
  static const int kTxParametersFieldNumber = 3;
  const ::sp::ste::tx_parameters& tx_parameters() const;
  ::sp::ste::tx_parameters* release_tx_parameters();
  ::sp::ste::tx_parameters* mutable_tx_parameters();
  void set_allocated_tx_parameters(::sp::ste::tx_parameters* tx_parameters);

  // .sp.ste.fft_parameters fft_parameters = 4;
  bool has_fft_parameters() const;
  void clear_fft_parameters();
  static const int kFftParametersFieldNumber = 4;
  const ::sp::ste::fft_parameters& fft_parameters() const;
  ::sp::ste::fft_parameters* release_fft_parameters();
  ::sp::ste::fft_parameters* mutable_fft_parameters();
  void set_allocated_fft_parameters(::sp::ste::fft_parameters* fft_parameters);

  // .sp.ste.other_parameters other_parameters = 5;
  bool has_other_parameters() const;
  void clear_other_parameters();
  static const int kOtherParametersFieldNumber = 5;
  const ::sp::ste::other_parameters& other_parameters() const;
  ::sp::ste::other_parameters* release_other_parameters();
  ::sp::ste::other_parameters* mutable_other_parameters();
  void set_allocated_other_parameters(::sp::ste::other_parameters* other_parameters);

  // @@protoc_insertion_point(class_scope:sp.ste.set_parameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::sp::ste::num_params* num_params_;
  ::sp::ste::state_parameters* state_parameters_;
  ::sp::ste::tx_parameters* tx_parameters_;
  ::sp::ste::fft_parameters* fft_parameters_;
  ::sp::ste::other_parameters* other_parameters_;
  mutable int _cached_size_;
  friend struct ::protobuf_sp_5fste_2eproto::TableStruct;
  friend void ::protobuf_sp_5fste_2eproto::InitDefaultsset_parametersImpl();
};
// -------------------------------------------------------------------

class parameter_values : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sp.ste.parameter_values) */ {
 public:
  parameter_values();
  virtual ~parameter_values();

  parameter_values(const parameter_values& from);

  inline parameter_values& operator=(const parameter_values& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  parameter_values(parameter_values&& from) noexcept
    : parameter_values() {
    *this = ::std::move(from);
  }

  inline parameter_values& operator=(parameter_values&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const parameter_values& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const parameter_values* internal_default_instance() {
    return reinterpret_cast<const parameter_values*>(
               &_parameter_values_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(parameter_values* other);
  friend void swap(parameter_values& a, parameter_values& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline parameter_values* New() const PROTOBUF_FINAL { return New(NULL); }

  parameter_values* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const parameter_values& from);
  void MergeFrom(const parameter_values& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(parameter_values* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .sp.ste.num_params num_params = 1;
  bool has_num_params() const;
  void clear_num_params();
  static const int kNumParamsFieldNumber = 1;
  const ::sp::ste::num_params& num_params() const;
  ::sp::ste::num_params* release_num_params();
  ::sp::ste::num_params* mutable_num_params();
  void set_allocated_num_params(::sp::ste::num_params* num_params);

  // .sp.ste.state_parameters state_parameters = 2;
  bool has_state_parameters() const;
  void clear_state_parameters();
  static const int kStateParametersFieldNumber = 2;
  const ::sp::ste::state_parameters& state_parameters() const;
  ::sp::ste::state_parameters* release_state_parameters();
  ::sp::ste::state_parameters* mutable_state_parameters();
  void set_allocated_state_parameters(::sp::ste::state_parameters* state_parameters);

  // .sp.ste.tx_parameters tx_parameters = 3;
  bool has_tx_parameters() const;
  void clear_tx_parameters();
  static const int kTxParametersFieldNumber = 3;
  const ::sp::ste::tx_parameters& tx_parameters() const;
  ::sp::ste::tx_parameters* release_tx_parameters();
  ::sp::ste::tx_parameters* mutable_tx_parameters();
  void set_allocated_tx_parameters(::sp::ste::tx_parameters* tx_parameters);

  // .sp.ste.fft_parameters fft_parameters = 4;
  bool has_fft_parameters() const;
  void clear_fft_parameters();
  static const int kFftParametersFieldNumber = 4;
  const ::sp::ste::fft_parameters& fft_parameters() const;
  ::sp::ste::fft_parameters* release_fft_parameters();
  ::sp::ste::fft_parameters* mutable_fft_parameters();
  void set_allocated_fft_parameters(::sp::ste::fft_parameters* fft_parameters);

  // .sp.ste.other_parameters other_parameters = 5;
  bool has_other_parameters() const;
  void clear_other_parameters();
  static const int kOtherParametersFieldNumber = 5;
  const ::sp::ste::other_parameters& other_parameters() const;
  ::sp::ste::other_parameters* release_other_parameters();
  ::sp::ste::other_parameters* mutable_other_parameters();
  void set_allocated_other_parameters(::sp::ste::other_parameters* other_parameters);

  // @@protoc_insertion_point(class_scope:sp.ste.parameter_values)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::sp::ste::num_params* num_params_;
  ::sp::ste::state_parameters* state_parameters_;
  ::sp::ste::tx_parameters* tx_parameters_;
  ::sp::ste::fft_parameters* fft_parameters_;
  ::sp::ste::other_parameters* other_parameters_;
  mutable int _cached_size_;
  friend struct ::protobuf_sp_5fste_2eproto::TableStruct;
  friend void ::protobuf_sp_5fste_2eproto::InitDefaultsparameter_valuesImpl();
};
// -------------------------------------------------------------------

class num_params : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sp.ste.num_params) */ {
 public:
  num_params();
  virtual ~num_params();

  num_params(const num_params& from);

  inline num_params& operator=(const num_params& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  num_params(num_params&& from) noexcept
    : num_params() {
    *this = ::std::move(from);
  }

  inline num_params& operator=(num_params&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const num_params& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const num_params* internal_default_instance() {
    return reinterpret_cast<const num_params*>(
               &_num_params_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(num_params* other);
  friend void swap(num_params& a, num_params& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline num_params* New() const PROTOBUF_FINAL { return New(NULL); }

  num_params* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const num_params& from);
  void MergeFrom(const num_params& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(num_params* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sp.ste.num_params)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 count_;
  mutable int _cached_size_;
  friend struct ::protobuf_sp_5fste_2eproto::TableStruct;
  friend void ::protobuf_sp_5fste_2eproto::InitDefaultsnum_paramsImpl();
};
// -------------------------------------------------------------------

class state_parameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sp.ste.state_parameters) */ {
 public:
  state_parameters();
  virtual ~state_parameters();

  state_parameters(const state_parameters& from);

  inline state_parameters& operator=(const state_parameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  state_parameters(state_parameters&& from) noexcept
    : state_parameters() {
    *this = ::std::move(from);
  }

  inline state_parameters& operator=(state_parameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const state_parameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const state_parameters* internal_default_instance() {
    return reinterpret_cast<const state_parameters*>(
               &_state_parameters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(state_parameters* other);
  friend void swap(state_parameters& a, state_parameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline state_parameters* New() const PROTOBUF_FINAL { return New(NULL); }

  state_parameters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const state_parameters& from);
  void MergeFrom(const state_parameters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(state_parameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool save_iq = 1;
  void clear_save_iq();
  static const int kSaveIqFieldNumber = 1;
  bool save_iq() const;
  void set_save_iq(bool value);

  // .sp.ste.state parameter_estimate_enable = 2;
  void clear_parameter_estimate_enable();
  static const int kParameterEstimateEnableFieldNumber = 2;
  ::sp::ste::state parameter_estimate_enable() const;
  void set_parameter_estimate_enable(::sp::ste::state value);

  // .sp.ste.state awgn_enable = 3;
  void clear_awgn_enable();
  static const int kAwgnEnableFieldNumber = 3;
  ::sp::ste::state awgn_enable() const;
  void set_awgn_enable(::sp::ste::state value);

  // .sp.ste.state notch_enable = 4;
  void clear_notch_enable();
  static const int kNotchEnableFieldNumber = 4;
  ::sp::ste::state notch_enable() const;
  void set_notch_enable(::sp::ste::state value);

  // .sp.ste.state fft_a_enable = 5;
  void clear_fft_a_enable();
  static const int kFftAEnableFieldNumber = 5;
  ::sp::ste::state fft_a_enable() const;
  void set_fft_a_enable(::sp::ste::state value);

  // .sp.ste.state fft_b_enable = 6;
  void clear_fft_b_enable();
  static const int kFftBEnableFieldNumber = 6;
  ::sp::ste::state fft_b_enable() const;
  void set_fft_b_enable(::sp::ste::state value);

  // @@protoc_insertion_point(class_scope:sp.ste.state_parameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool save_iq_;
  int parameter_estimate_enable_;
  int awgn_enable_;
  int notch_enable_;
  int fft_a_enable_;
  int fft_b_enable_;
  mutable int _cached_size_;
  friend struct ::protobuf_sp_5fste_2eproto::TableStruct;
  friend void ::protobuf_sp_5fste_2eproto::InitDefaultsstate_parametersImpl();
};
// -------------------------------------------------------------------

class tx_parameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sp.ste.tx_parameters) */ {
 public:
  tx_parameters();
  virtual ~tx_parameters();

  tx_parameters(const tx_parameters& from);

  inline tx_parameters& operator=(const tx_parameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  tx_parameters(tx_parameters&& from) noexcept
    : tx_parameters() {
    *this = ::std::move(from);
  }

  inline tx_parameters& operator=(tx_parameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const tx_parameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const tx_parameters* internal_default_instance() {
    return reinterpret_cast<const tx_parameters*>(
               &_tx_parameters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(tx_parameters* other);
  friend void swap(tx_parameters& a, tx_parameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline tx_parameters* New() const PROTOBUF_FINAL { return New(NULL); }

  tx_parameters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tx_parameters& from);
  void MergeFrom(const tx_parameters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tx_parameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double num_tx_samples_total = 1;
  void clear_num_tx_samples_total();
  static const int kNumTxSamplesTotalFieldNumber = 1;
  double num_tx_samples_total() const;
  void set_num_tx_samples_total(double value);

  // double tx_freq1_Hz = 2;
  void clear_tx_freq1_hz();
  static const int kTxFreq1HzFieldNumber = 2;
  double tx_freq1_hz() const;
  void set_tx_freq1_hz(double value);

  // double tx_freq2_Hz = 3;
  void clear_tx_freq2_hz();
  static const int kTxFreq2HzFieldNumber = 3;
  double tx_freq2_hz() const;
  void set_tx_freq2_hz(double value);

  // double tx_phase1_rot = 4;
  void clear_tx_phase1_rot();
  static const int kTxPhase1RotFieldNumber = 4;
  double tx_phase1_rot() const;
  void set_tx_phase1_rot(double value);

  // double tx_phase2_rot = 5;
  void clear_tx_phase2_rot();
  static const int kTxPhase2RotFieldNumber = 5;
  double tx_phase2_rot() const;
  void set_tx_phase2_rot(double value);

  // @@protoc_insertion_point(class_scope:sp.ste.tx_parameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double num_tx_samples_total_;
  double tx_freq1_hz_;
  double tx_freq2_hz_;
  double tx_phase1_rot_;
  double tx_phase2_rot_;
  mutable int _cached_size_;
  friend struct ::protobuf_sp_5fste_2eproto::TableStruct;
  friend void ::protobuf_sp_5fste_2eproto::InitDefaultstx_parametersImpl();
};
// -------------------------------------------------------------------

class fft_parameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sp.ste.fft_parameters) */ {
 public:
  fft_parameters();
  virtual ~fft_parameters();

  fft_parameters(const fft_parameters& from);

  inline fft_parameters& operator=(const fft_parameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  fft_parameters(fft_parameters&& from) noexcept
    : fft_parameters() {
    *this = ::std::move(from);
  }

  inline fft_parameters& operator=(fft_parameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const fft_parameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const fft_parameters* internal_default_instance() {
    return reinterpret_cast<const fft_parameters*>(
               &_fft_parameters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(fft_parameters* other);
  friend void swap(fft_parameters& a, fft_parameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline fft_parameters* New() const PROTOBUF_FINAL { return New(NULL); }

  fft_parameters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const fft_parameters& from);
  void MergeFrom(const fft_parameters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(fft_parameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 fft_length_a = 1;
  void clear_fft_length_a();
  static const int kFftLengthAFieldNumber = 1;
  ::google::protobuf::uint32 fft_length_a() const;
  void set_fft_length_a(::google::protobuf::uint32 value);

  // uint32 fft_batches_a = 2;
  void clear_fft_batches_a();
  static const int kFftBatchesAFieldNumber = 2;
  ::google::protobuf::uint32 fft_batches_a() const;
  void set_fft_batches_a(::google::protobuf::uint32 value);

  // uint32 fft_length_b = 3;
  void clear_fft_length_b();
  static const int kFftLengthBFieldNumber = 3;
  ::google::protobuf::uint32 fft_length_b() const;
  void set_fft_length_b(::google::protobuf::uint32 value);

  // uint32 fft_batches_b = 4;
  void clear_fft_batches_b();
  static const int kFftBatchesBFieldNumber = 4;
  ::google::protobuf::uint32 fft_batches_b() const;
  void set_fft_batches_b(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sp.ste.fft_parameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 fft_length_a_;
  ::google::protobuf::uint32 fft_batches_a_;
  ::google::protobuf::uint32 fft_length_b_;
  ::google::protobuf::uint32 fft_batches_b_;
  mutable int _cached_size_;
  friend struct ::protobuf_sp_5fste_2eproto::TableStruct;
  friend void ::protobuf_sp_5fste_2eproto::InitDefaultsfft_parametersImpl();
};
// -------------------------------------------------------------------

class other_parameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sp.ste.other_parameters) */ {
 public:
  other_parameters();
  virtual ~other_parameters();

  other_parameters(const other_parameters& from);

  inline other_parameters& operator=(const other_parameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  other_parameters(other_parameters&& from) noexcept
    : other_parameters() {
    *this = ::std::move(from);
  }

  inline other_parameters& operator=(other_parameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const other_parameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const other_parameters* internal_default_instance() {
    return reinterpret_cast<const other_parameters*>(
               &_other_parameters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(other_parameters* other);
  friend void swap(other_parameters& a, other_parameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline other_parameters* New() const PROTOBUF_FINAL { return New(NULL); }

  other_parameters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const other_parameters& from);
  void MergeFrom(const other_parameters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(other_parameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double num_rx_samples = 1;
  void clear_num_rx_samples();
  static const int kNumRxSamplesFieldNumber = 1;
  double num_rx_samples() const;
  void set_num_rx_samples(double value);

  // double rx_rot_freq_Hz = 2;
  void clear_rx_rot_freq_hz();
  static const int kRxRotFreqHzFieldNumber = 2;
  double rx_rot_freq_hz() const;
  void set_rx_rot_freq_hz(double value);

  // uint32 decimation = 3;
  void clear_decimation();
  static const int kDecimationFieldNumber = 3;
  ::google::protobuf::uint32 decimation() const;
  void set_decimation(::google::protobuf::uint32 value);

  // uint32 gain1 = 4;
  void clear_gain1();
  static const int kGain1FieldNumber = 4;
  ::google::protobuf::uint32 gain1() const;
  void set_gain1(::google::protobuf::uint32 value);

  // double nextTxStartTime = 6;
  void clear_nexttxstarttime();
  static const int kNextTxStartTimeFieldNumber = 6;
  double nexttxstarttime() const;
  void set_nexttxstarttime(double value);

  // double nextRxStartTime = 7;
  void clear_nextrxstarttime();
  static const int kNextRxStartTimeFieldNumber = 7;
  double nextrxstarttime() const;
  void set_nextrxstarttime(double value);

  // uint32 gain2 = 5;
  void clear_gain2();
  static const int kGain2FieldNumber = 5;
  ::google::protobuf::uint32 gain2() const;
  void set_gain2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sp.ste.other_parameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double num_rx_samples_;
  double rx_rot_freq_hz_;
  ::google::protobuf::uint32 decimation_;
  ::google::protobuf::uint32 gain1_;
  double nexttxstarttime_;
  double nextrxstarttime_;
  ::google::protobuf::uint32 gain2_;
  mutable int _cached_size_;
  friend struct ::protobuf_sp_5fste_2eproto::TableStruct;
  friend void ::protobuf_sp_5fste_2eproto::InitDefaultsother_parametersImpl();
};
// -------------------------------------------------------------------

class null_message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sp.ste.null_message) */ {
 public:
  null_message();
  virtual ~null_message();

  null_message(const null_message& from);

  inline null_message& operator=(const null_message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  null_message(null_message&& from) noexcept
    : null_message() {
    *this = ::std::move(from);
  }

  inline null_message& operator=(null_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const null_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const null_message* internal_default_instance() {
    return reinterpret_cast<const null_message*>(
               &_null_message_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(null_message* other);
  friend void swap(null_message& a, null_message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline null_message* New() const PROTOBUF_FINAL { return New(NULL); }

  null_message* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const null_message& from);
  void MergeFrom(const null_message& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(null_message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sp.ste.null_message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_sp_5fste_2eproto::TableStruct;
  friend void ::protobuf_sp_5fste_2eproto::InitDefaultsnull_messageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// set_parameters

// .sp.ste.num_params num_params = 1;
inline bool set_parameters::has_num_params() const {
  return this != internal_default_instance() && num_params_ != NULL;
}
inline void set_parameters::clear_num_params() {
  if (GetArenaNoVirtual() == NULL && num_params_ != NULL) {
    delete num_params_;
  }
  num_params_ = NULL;
}
inline const ::sp::ste::num_params& set_parameters::num_params() const {
  const ::sp::ste::num_params* p = num_params_;
  // @@protoc_insertion_point(field_get:sp.ste.set_parameters.num_params)
  return p != NULL ? *p : *reinterpret_cast<const ::sp::ste::num_params*>(
      &::sp::ste::_num_params_default_instance_);
}
inline ::sp::ste::num_params* set_parameters::release_num_params() {
  // @@protoc_insertion_point(field_release:sp.ste.set_parameters.num_params)
  
  ::sp::ste::num_params* temp = num_params_;
  num_params_ = NULL;
  return temp;
}
inline ::sp::ste::num_params* set_parameters::mutable_num_params() {
  
  if (num_params_ == NULL) {
    num_params_ = new ::sp::ste::num_params;
  }
  // @@protoc_insertion_point(field_mutable:sp.ste.set_parameters.num_params)
  return num_params_;
}
inline void set_parameters::set_allocated_num_params(::sp::ste::num_params* num_params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete num_params_;
  }
  if (num_params) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      num_params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, num_params, submessage_arena);
    }
    
  } else {
    
  }
  num_params_ = num_params;
  // @@protoc_insertion_point(field_set_allocated:sp.ste.set_parameters.num_params)
}

// .sp.ste.state_parameters state_parameters = 2;
inline bool set_parameters::has_state_parameters() const {
  return this != internal_default_instance() && state_parameters_ != NULL;
}
inline void set_parameters::clear_state_parameters() {
  if (GetArenaNoVirtual() == NULL && state_parameters_ != NULL) {
    delete state_parameters_;
  }
  state_parameters_ = NULL;
}
inline const ::sp::ste::state_parameters& set_parameters::state_parameters() const {
  const ::sp::ste::state_parameters* p = state_parameters_;
  // @@protoc_insertion_point(field_get:sp.ste.set_parameters.state_parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::sp::ste::state_parameters*>(
      &::sp::ste::_state_parameters_default_instance_);
}
inline ::sp::ste::state_parameters* set_parameters::release_state_parameters() {
  // @@protoc_insertion_point(field_release:sp.ste.set_parameters.state_parameters)
  
  ::sp::ste::state_parameters* temp = state_parameters_;
  state_parameters_ = NULL;
  return temp;
}
inline ::sp::ste::state_parameters* set_parameters::mutable_state_parameters() {
  
  if (state_parameters_ == NULL) {
    state_parameters_ = new ::sp::ste::state_parameters;
  }
  // @@protoc_insertion_point(field_mutable:sp.ste.set_parameters.state_parameters)
  return state_parameters_;
}
inline void set_parameters::set_allocated_state_parameters(::sp::ste::state_parameters* state_parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_parameters_;
  }
  if (state_parameters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state_parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state_parameters, submessage_arena);
    }
    
  } else {
    
  }
  state_parameters_ = state_parameters;
  // @@protoc_insertion_point(field_set_allocated:sp.ste.set_parameters.state_parameters)
}

// .sp.ste.tx_parameters tx_parameters = 3;
inline bool set_parameters::has_tx_parameters() const {
  return this != internal_default_instance() && tx_parameters_ != NULL;
}
inline void set_parameters::clear_tx_parameters() {
  if (GetArenaNoVirtual() == NULL && tx_parameters_ != NULL) {
    delete tx_parameters_;
  }
  tx_parameters_ = NULL;
}
inline const ::sp::ste::tx_parameters& set_parameters::tx_parameters() const {
  const ::sp::ste::tx_parameters* p = tx_parameters_;
  // @@protoc_insertion_point(field_get:sp.ste.set_parameters.tx_parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::sp::ste::tx_parameters*>(
      &::sp::ste::_tx_parameters_default_instance_);
}
inline ::sp::ste::tx_parameters* set_parameters::release_tx_parameters() {
  // @@protoc_insertion_point(field_release:sp.ste.set_parameters.tx_parameters)
  
  ::sp::ste::tx_parameters* temp = tx_parameters_;
  tx_parameters_ = NULL;
  return temp;
}
inline ::sp::ste::tx_parameters* set_parameters::mutable_tx_parameters() {
  
  if (tx_parameters_ == NULL) {
    tx_parameters_ = new ::sp::ste::tx_parameters;
  }
  // @@protoc_insertion_point(field_mutable:sp.ste.set_parameters.tx_parameters)
  return tx_parameters_;
}
inline void set_parameters::set_allocated_tx_parameters(::sp::ste::tx_parameters* tx_parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tx_parameters_;
  }
  if (tx_parameters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_parameters, submessage_arena);
    }
    
  } else {
    
  }
  tx_parameters_ = tx_parameters;
  // @@protoc_insertion_point(field_set_allocated:sp.ste.set_parameters.tx_parameters)
}

// .sp.ste.fft_parameters fft_parameters = 4;
inline bool set_parameters::has_fft_parameters() const {
  return this != internal_default_instance() && fft_parameters_ != NULL;
}
inline void set_parameters::clear_fft_parameters() {
  if (GetArenaNoVirtual() == NULL && fft_parameters_ != NULL) {
    delete fft_parameters_;
  }
  fft_parameters_ = NULL;
}
inline const ::sp::ste::fft_parameters& set_parameters::fft_parameters() const {
  const ::sp::ste::fft_parameters* p = fft_parameters_;
  // @@protoc_insertion_point(field_get:sp.ste.set_parameters.fft_parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::sp::ste::fft_parameters*>(
      &::sp::ste::_fft_parameters_default_instance_);
}
inline ::sp::ste::fft_parameters* set_parameters::release_fft_parameters() {
  // @@protoc_insertion_point(field_release:sp.ste.set_parameters.fft_parameters)
  
  ::sp::ste::fft_parameters* temp = fft_parameters_;
  fft_parameters_ = NULL;
  return temp;
}
inline ::sp::ste::fft_parameters* set_parameters::mutable_fft_parameters() {
  
  if (fft_parameters_ == NULL) {
    fft_parameters_ = new ::sp::ste::fft_parameters;
  }
  // @@protoc_insertion_point(field_mutable:sp.ste.set_parameters.fft_parameters)
  return fft_parameters_;
}
inline void set_parameters::set_allocated_fft_parameters(::sp::ste::fft_parameters* fft_parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fft_parameters_;
  }
  if (fft_parameters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fft_parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fft_parameters, submessage_arena);
    }
    
  } else {
    
  }
  fft_parameters_ = fft_parameters;
  // @@protoc_insertion_point(field_set_allocated:sp.ste.set_parameters.fft_parameters)
}

// .sp.ste.other_parameters other_parameters = 5;
inline bool set_parameters::has_other_parameters() const {
  return this != internal_default_instance() && other_parameters_ != NULL;
}
inline void set_parameters::clear_other_parameters() {
  if (GetArenaNoVirtual() == NULL && other_parameters_ != NULL) {
    delete other_parameters_;
  }
  other_parameters_ = NULL;
}
inline const ::sp::ste::other_parameters& set_parameters::other_parameters() const {
  const ::sp::ste::other_parameters* p = other_parameters_;
  // @@protoc_insertion_point(field_get:sp.ste.set_parameters.other_parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::sp::ste::other_parameters*>(
      &::sp::ste::_other_parameters_default_instance_);
}
inline ::sp::ste::other_parameters* set_parameters::release_other_parameters() {
  // @@protoc_insertion_point(field_release:sp.ste.set_parameters.other_parameters)
  
  ::sp::ste::other_parameters* temp = other_parameters_;
  other_parameters_ = NULL;
  return temp;
}
inline ::sp::ste::other_parameters* set_parameters::mutable_other_parameters() {
  
  if (other_parameters_ == NULL) {
    other_parameters_ = new ::sp::ste::other_parameters;
  }
  // @@protoc_insertion_point(field_mutable:sp.ste.set_parameters.other_parameters)
  return other_parameters_;
}
inline void set_parameters::set_allocated_other_parameters(::sp::ste::other_parameters* other_parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete other_parameters_;
  }
  if (other_parameters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      other_parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, other_parameters, submessage_arena);
    }
    
  } else {
    
  }
  other_parameters_ = other_parameters;
  // @@protoc_insertion_point(field_set_allocated:sp.ste.set_parameters.other_parameters)
}

// -------------------------------------------------------------------

// parameter_values

// .sp.ste.num_params num_params = 1;
inline bool parameter_values::has_num_params() const {
  return this != internal_default_instance() && num_params_ != NULL;
}
inline void parameter_values::clear_num_params() {
  if (GetArenaNoVirtual() == NULL && num_params_ != NULL) {
    delete num_params_;
  }
  num_params_ = NULL;
}
inline const ::sp::ste::num_params& parameter_values::num_params() const {
  const ::sp::ste::num_params* p = num_params_;
  // @@protoc_insertion_point(field_get:sp.ste.parameter_values.num_params)
  return p != NULL ? *p : *reinterpret_cast<const ::sp::ste::num_params*>(
      &::sp::ste::_num_params_default_instance_);
}
inline ::sp::ste::num_params* parameter_values::release_num_params() {
  // @@protoc_insertion_point(field_release:sp.ste.parameter_values.num_params)
  
  ::sp::ste::num_params* temp = num_params_;
  num_params_ = NULL;
  return temp;
}
inline ::sp::ste::num_params* parameter_values::mutable_num_params() {
  
  if (num_params_ == NULL) {
    num_params_ = new ::sp::ste::num_params;
  }
  // @@protoc_insertion_point(field_mutable:sp.ste.parameter_values.num_params)
  return num_params_;
}
inline void parameter_values::set_allocated_num_params(::sp::ste::num_params* num_params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete num_params_;
  }
  if (num_params) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      num_params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, num_params, submessage_arena);
    }
    
  } else {
    
  }
  num_params_ = num_params;
  // @@protoc_insertion_point(field_set_allocated:sp.ste.parameter_values.num_params)
}

// .sp.ste.state_parameters state_parameters = 2;
inline bool parameter_values::has_state_parameters() const {
  return this != internal_default_instance() && state_parameters_ != NULL;
}
inline void parameter_values::clear_state_parameters() {
  if (GetArenaNoVirtual() == NULL && state_parameters_ != NULL) {
    delete state_parameters_;
  }
  state_parameters_ = NULL;
}
inline const ::sp::ste::state_parameters& parameter_values::state_parameters() const {
  const ::sp::ste::state_parameters* p = state_parameters_;
  // @@protoc_insertion_point(field_get:sp.ste.parameter_values.state_parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::sp::ste::state_parameters*>(
      &::sp::ste::_state_parameters_default_instance_);
}
inline ::sp::ste::state_parameters* parameter_values::release_state_parameters() {
  // @@protoc_insertion_point(field_release:sp.ste.parameter_values.state_parameters)
  
  ::sp::ste::state_parameters* temp = state_parameters_;
  state_parameters_ = NULL;
  return temp;
}
inline ::sp::ste::state_parameters* parameter_values::mutable_state_parameters() {
  
  if (state_parameters_ == NULL) {
    state_parameters_ = new ::sp::ste::state_parameters;
  }
  // @@protoc_insertion_point(field_mutable:sp.ste.parameter_values.state_parameters)
  return state_parameters_;
}
inline void parameter_values::set_allocated_state_parameters(::sp::ste::state_parameters* state_parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_parameters_;
  }
  if (state_parameters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state_parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state_parameters, submessage_arena);
    }
    
  } else {
    
  }
  state_parameters_ = state_parameters;
  // @@protoc_insertion_point(field_set_allocated:sp.ste.parameter_values.state_parameters)
}

// .sp.ste.tx_parameters tx_parameters = 3;
inline bool parameter_values::has_tx_parameters() const {
  return this != internal_default_instance() && tx_parameters_ != NULL;
}
inline void parameter_values::clear_tx_parameters() {
  if (GetArenaNoVirtual() == NULL && tx_parameters_ != NULL) {
    delete tx_parameters_;
  }
  tx_parameters_ = NULL;
}
inline const ::sp::ste::tx_parameters& parameter_values::tx_parameters() const {
  const ::sp::ste::tx_parameters* p = tx_parameters_;
  // @@protoc_insertion_point(field_get:sp.ste.parameter_values.tx_parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::sp::ste::tx_parameters*>(
      &::sp::ste::_tx_parameters_default_instance_);
}
inline ::sp::ste::tx_parameters* parameter_values::release_tx_parameters() {
  // @@protoc_insertion_point(field_release:sp.ste.parameter_values.tx_parameters)
  
  ::sp::ste::tx_parameters* temp = tx_parameters_;
  tx_parameters_ = NULL;
  return temp;
}
inline ::sp::ste::tx_parameters* parameter_values::mutable_tx_parameters() {
  
  if (tx_parameters_ == NULL) {
    tx_parameters_ = new ::sp::ste::tx_parameters;
  }
  // @@protoc_insertion_point(field_mutable:sp.ste.parameter_values.tx_parameters)
  return tx_parameters_;
}
inline void parameter_values::set_allocated_tx_parameters(::sp::ste::tx_parameters* tx_parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tx_parameters_;
  }
  if (tx_parameters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_parameters, submessage_arena);
    }
    
  } else {
    
  }
  tx_parameters_ = tx_parameters;
  // @@protoc_insertion_point(field_set_allocated:sp.ste.parameter_values.tx_parameters)
}

// .sp.ste.fft_parameters fft_parameters = 4;
inline bool parameter_values::has_fft_parameters() const {
  return this != internal_default_instance() && fft_parameters_ != NULL;
}
inline void parameter_values::clear_fft_parameters() {
  if (GetArenaNoVirtual() == NULL && fft_parameters_ != NULL) {
    delete fft_parameters_;
  }
  fft_parameters_ = NULL;
}
inline const ::sp::ste::fft_parameters& parameter_values::fft_parameters() const {
  const ::sp::ste::fft_parameters* p = fft_parameters_;
  // @@protoc_insertion_point(field_get:sp.ste.parameter_values.fft_parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::sp::ste::fft_parameters*>(
      &::sp::ste::_fft_parameters_default_instance_);
}
inline ::sp::ste::fft_parameters* parameter_values::release_fft_parameters() {
  // @@protoc_insertion_point(field_release:sp.ste.parameter_values.fft_parameters)
  
  ::sp::ste::fft_parameters* temp = fft_parameters_;
  fft_parameters_ = NULL;
  return temp;
}
inline ::sp::ste::fft_parameters* parameter_values::mutable_fft_parameters() {
  
  if (fft_parameters_ == NULL) {
    fft_parameters_ = new ::sp::ste::fft_parameters;
  }
  // @@protoc_insertion_point(field_mutable:sp.ste.parameter_values.fft_parameters)
  return fft_parameters_;
}
inline void parameter_values::set_allocated_fft_parameters(::sp::ste::fft_parameters* fft_parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fft_parameters_;
  }
  if (fft_parameters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fft_parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fft_parameters, submessage_arena);
    }
    
  } else {
    
  }
  fft_parameters_ = fft_parameters;
  // @@protoc_insertion_point(field_set_allocated:sp.ste.parameter_values.fft_parameters)
}

// .sp.ste.other_parameters other_parameters = 5;
inline bool parameter_values::has_other_parameters() const {
  return this != internal_default_instance() && other_parameters_ != NULL;
}
inline void parameter_values::clear_other_parameters() {
  if (GetArenaNoVirtual() == NULL && other_parameters_ != NULL) {
    delete other_parameters_;
  }
  other_parameters_ = NULL;
}
inline const ::sp::ste::other_parameters& parameter_values::other_parameters() const {
  const ::sp::ste::other_parameters* p = other_parameters_;
  // @@protoc_insertion_point(field_get:sp.ste.parameter_values.other_parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::sp::ste::other_parameters*>(
      &::sp::ste::_other_parameters_default_instance_);
}
inline ::sp::ste::other_parameters* parameter_values::release_other_parameters() {
  // @@protoc_insertion_point(field_release:sp.ste.parameter_values.other_parameters)
  
  ::sp::ste::other_parameters* temp = other_parameters_;
  other_parameters_ = NULL;
  return temp;
}
inline ::sp::ste::other_parameters* parameter_values::mutable_other_parameters() {
  
  if (other_parameters_ == NULL) {
    other_parameters_ = new ::sp::ste::other_parameters;
  }
  // @@protoc_insertion_point(field_mutable:sp.ste.parameter_values.other_parameters)
  return other_parameters_;
}
inline void parameter_values::set_allocated_other_parameters(::sp::ste::other_parameters* other_parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete other_parameters_;
  }
  if (other_parameters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      other_parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, other_parameters, submessage_arena);
    }
    
  } else {
    
  }
  other_parameters_ = other_parameters;
  // @@protoc_insertion_point(field_set_allocated:sp.ste.parameter_values.other_parameters)
}

// -------------------------------------------------------------------

// num_params

// uint32 count = 1;
inline void num_params::clear_count() {
  count_ = 0u;
}
inline ::google::protobuf::uint32 num_params::count() const {
  // @@protoc_insertion_point(field_get:sp.ste.num_params.count)
  return count_;
}
inline void num_params::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.num_params.count)
}

// -------------------------------------------------------------------

// state_parameters

// bool save_iq = 1;
inline void state_parameters::clear_save_iq() {
  save_iq_ = false;
}
inline bool state_parameters::save_iq() const {
  // @@protoc_insertion_point(field_get:sp.ste.state_parameters.save_iq)
  return save_iq_;
}
inline void state_parameters::set_save_iq(bool value) {
  
  save_iq_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.state_parameters.save_iq)
}

// .sp.ste.state parameter_estimate_enable = 2;
inline void state_parameters::clear_parameter_estimate_enable() {
  parameter_estimate_enable_ = 0;
}
inline ::sp::ste::state state_parameters::parameter_estimate_enable() const {
  // @@protoc_insertion_point(field_get:sp.ste.state_parameters.parameter_estimate_enable)
  return static_cast< ::sp::ste::state >(parameter_estimate_enable_);
}
inline void state_parameters::set_parameter_estimate_enable(::sp::ste::state value) {
  
  parameter_estimate_enable_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.state_parameters.parameter_estimate_enable)
}

// .sp.ste.state awgn_enable = 3;
inline void state_parameters::clear_awgn_enable() {
  awgn_enable_ = 0;
}
inline ::sp::ste::state state_parameters::awgn_enable() const {
  // @@protoc_insertion_point(field_get:sp.ste.state_parameters.awgn_enable)
  return static_cast< ::sp::ste::state >(awgn_enable_);
}
inline void state_parameters::set_awgn_enable(::sp::ste::state value) {
  
  awgn_enable_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.state_parameters.awgn_enable)
}

// .sp.ste.state notch_enable = 4;
inline void state_parameters::clear_notch_enable() {
  notch_enable_ = 0;
}
inline ::sp::ste::state state_parameters::notch_enable() const {
  // @@protoc_insertion_point(field_get:sp.ste.state_parameters.notch_enable)
  return static_cast< ::sp::ste::state >(notch_enable_);
}
inline void state_parameters::set_notch_enable(::sp::ste::state value) {
  
  notch_enable_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.state_parameters.notch_enable)
}

// .sp.ste.state fft_a_enable = 5;
inline void state_parameters::clear_fft_a_enable() {
  fft_a_enable_ = 0;
}
inline ::sp::ste::state state_parameters::fft_a_enable() const {
  // @@protoc_insertion_point(field_get:sp.ste.state_parameters.fft_a_enable)
  return static_cast< ::sp::ste::state >(fft_a_enable_);
}
inline void state_parameters::set_fft_a_enable(::sp::ste::state value) {
  
  fft_a_enable_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.state_parameters.fft_a_enable)
}

// .sp.ste.state fft_b_enable = 6;
inline void state_parameters::clear_fft_b_enable() {
  fft_b_enable_ = 0;
}
inline ::sp::ste::state state_parameters::fft_b_enable() const {
  // @@protoc_insertion_point(field_get:sp.ste.state_parameters.fft_b_enable)
  return static_cast< ::sp::ste::state >(fft_b_enable_);
}
inline void state_parameters::set_fft_b_enable(::sp::ste::state value) {
  
  fft_b_enable_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.state_parameters.fft_b_enable)
}

// -------------------------------------------------------------------

// tx_parameters

// double num_tx_samples_total = 1;
inline void tx_parameters::clear_num_tx_samples_total() {
  num_tx_samples_total_ = 0;
}
inline double tx_parameters::num_tx_samples_total() const {
  // @@protoc_insertion_point(field_get:sp.ste.tx_parameters.num_tx_samples_total)
  return num_tx_samples_total_;
}
inline void tx_parameters::set_num_tx_samples_total(double value) {
  
  num_tx_samples_total_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.tx_parameters.num_tx_samples_total)
}

// double tx_freq1_Hz = 2;
inline void tx_parameters::clear_tx_freq1_hz() {
  tx_freq1_hz_ = 0;
}
inline double tx_parameters::tx_freq1_hz() const {
  // @@protoc_insertion_point(field_get:sp.ste.tx_parameters.tx_freq1_Hz)
  return tx_freq1_hz_;
}
inline void tx_parameters::set_tx_freq1_hz(double value) {
  
  tx_freq1_hz_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.tx_parameters.tx_freq1_Hz)
}

// double tx_freq2_Hz = 3;
inline void tx_parameters::clear_tx_freq2_hz() {
  tx_freq2_hz_ = 0;
}
inline double tx_parameters::tx_freq2_hz() const {
  // @@protoc_insertion_point(field_get:sp.ste.tx_parameters.tx_freq2_Hz)
  return tx_freq2_hz_;
}
inline void tx_parameters::set_tx_freq2_hz(double value) {
  
  tx_freq2_hz_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.tx_parameters.tx_freq2_Hz)
}

// double tx_phase1_rot = 4;
inline void tx_parameters::clear_tx_phase1_rot() {
  tx_phase1_rot_ = 0;
}
inline double tx_parameters::tx_phase1_rot() const {
  // @@protoc_insertion_point(field_get:sp.ste.tx_parameters.tx_phase1_rot)
  return tx_phase1_rot_;
}
inline void tx_parameters::set_tx_phase1_rot(double value) {
  
  tx_phase1_rot_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.tx_parameters.tx_phase1_rot)
}

// double tx_phase2_rot = 5;
inline void tx_parameters::clear_tx_phase2_rot() {
  tx_phase2_rot_ = 0;
}
inline double tx_parameters::tx_phase2_rot() const {
  // @@protoc_insertion_point(field_get:sp.ste.tx_parameters.tx_phase2_rot)
  return tx_phase2_rot_;
}
inline void tx_parameters::set_tx_phase2_rot(double value) {
  
  tx_phase2_rot_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.tx_parameters.tx_phase2_rot)
}

// -------------------------------------------------------------------

// fft_parameters

// uint32 fft_length_a = 1;
inline void fft_parameters::clear_fft_length_a() {
  fft_length_a_ = 0u;
}
inline ::google::protobuf::uint32 fft_parameters::fft_length_a() const {
  // @@protoc_insertion_point(field_get:sp.ste.fft_parameters.fft_length_a)
  return fft_length_a_;
}
inline void fft_parameters::set_fft_length_a(::google::protobuf::uint32 value) {
  
  fft_length_a_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.fft_parameters.fft_length_a)
}

// uint32 fft_batches_a = 2;
inline void fft_parameters::clear_fft_batches_a() {
  fft_batches_a_ = 0u;
}
inline ::google::protobuf::uint32 fft_parameters::fft_batches_a() const {
  // @@protoc_insertion_point(field_get:sp.ste.fft_parameters.fft_batches_a)
  return fft_batches_a_;
}
inline void fft_parameters::set_fft_batches_a(::google::protobuf::uint32 value) {
  
  fft_batches_a_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.fft_parameters.fft_batches_a)
}

// uint32 fft_length_b = 3;
inline void fft_parameters::clear_fft_length_b() {
  fft_length_b_ = 0u;
}
inline ::google::protobuf::uint32 fft_parameters::fft_length_b() const {
  // @@protoc_insertion_point(field_get:sp.ste.fft_parameters.fft_length_b)
  return fft_length_b_;
}
inline void fft_parameters::set_fft_length_b(::google::protobuf::uint32 value) {
  
  fft_length_b_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.fft_parameters.fft_length_b)
}

// uint32 fft_batches_b = 4;
inline void fft_parameters::clear_fft_batches_b() {
  fft_batches_b_ = 0u;
}
inline ::google::protobuf::uint32 fft_parameters::fft_batches_b() const {
  // @@protoc_insertion_point(field_get:sp.ste.fft_parameters.fft_batches_b)
  return fft_batches_b_;
}
inline void fft_parameters::set_fft_batches_b(::google::protobuf::uint32 value) {
  
  fft_batches_b_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.fft_parameters.fft_batches_b)
}

// -------------------------------------------------------------------

// other_parameters

// double num_rx_samples = 1;
inline void other_parameters::clear_num_rx_samples() {
  num_rx_samples_ = 0;
}
inline double other_parameters::num_rx_samples() const {
  // @@protoc_insertion_point(field_get:sp.ste.other_parameters.num_rx_samples)
  return num_rx_samples_;
}
inline void other_parameters::set_num_rx_samples(double value) {
  
  num_rx_samples_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.other_parameters.num_rx_samples)
}

// double rx_rot_freq_Hz = 2;
inline void other_parameters::clear_rx_rot_freq_hz() {
  rx_rot_freq_hz_ = 0;
}
inline double other_parameters::rx_rot_freq_hz() const {
  // @@protoc_insertion_point(field_get:sp.ste.other_parameters.rx_rot_freq_Hz)
  return rx_rot_freq_hz_;
}
inline void other_parameters::set_rx_rot_freq_hz(double value) {
  
  rx_rot_freq_hz_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.other_parameters.rx_rot_freq_Hz)
}

// uint32 decimation = 3;
inline void other_parameters::clear_decimation() {
  decimation_ = 0u;
}
inline ::google::protobuf::uint32 other_parameters::decimation() const {
  // @@protoc_insertion_point(field_get:sp.ste.other_parameters.decimation)
  return decimation_;
}
inline void other_parameters::set_decimation(::google::protobuf::uint32 value) {
  
  decimation_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.other_parameters.decimation)
}

// uint32 gain1 = 4;
inline void other_parameters::clear_gain1() {
  gain1_ = 0u;
}
inline ::google::protobuf::uint32 other_parameters::gain1() const {
  // @@protoc_insertion_point(field_get:sp.ste.other_parameters.gain1)
  return gain1_;
}
inline void other_parameters::set_gain1(::google::protobuf::uint32 value) {
  
  gain1_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.other_parameters.gain1)
}

// uint32 gain2 = 5;
inline void other_parameters::clear_gain2() {
  gain2_ = 0u;
}
inline ::google::protobuf::uint32 other_parameters::gain2() const {
  // @@protoc_insertion_point(field_get:sp.ste.other_parameters.gain2)
  return gain2_;
}
inline void other_parameters::set_gain2(::google::protobuf::uint32 value) {
  
  gain2_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.other_parameters.gain2)
}

// double nextTxStartTime = 6;
inline void other_parameters::clear_nexttxstarttime() {
  nexttxstarttime_ = 0;
}
inline double other_parameters::nexttxstarttime() const {
  // @@protoc_insertion_point(field_get:sp.ste.other_parameters.nextTxStartTime)
  return nexttxstarttime_;
}
inline void other_parameters::set_nexttxstarttime(double value) {
  
  nexttxstarttime_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.other_parameters.nextTxStartTime)
}

// double nextRxStartTime = 7;
inline void other_parameters::clear_nextrxstarttime() {
  nextrxstarttime_ = 0;
}
inline double other_parameters::nextrxstarttime() const {
  // @@protoc_insertion_point(field_get:sp.ste.other_parameters.nextRxStartTime)
  return nextrxstarttime_;
}
inline void other_parameters::set_nextrxstarttime(double value) {
  
  nextrxstarttime_ = value;
  // @@protoc_insertion_point(field_set:sp.ste.other_parameters.nextRxStartTime)
}

// -------------------------------------------------------------------

// null_message

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ste
}  // namespace sp

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sp::ste::state> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sp::ste::state>() {
  return ::sp::ste::state_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sp_5fste_2eproto__INCLUDED
